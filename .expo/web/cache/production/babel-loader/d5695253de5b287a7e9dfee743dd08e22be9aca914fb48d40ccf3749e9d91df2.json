{"ast":null,"code":"export function Bezier(mX1,mY1,mX2,mY2){'worklet';var NEWTON_ITERATIONS=4;var NEWTON_MIN_SLOPE=0.001;var SUBDIVISION_PRECISION=0.0000001;var SUBDIVISION_MAX_ITERATIONS=10;var kSplineTableSize=11;var kSampleStepSize=1.0/(kSplineTableSize-1.0);function A(aA1,aA2){'worklet';return 1.0-3.0*aA2+3.0*aA1;}function B(aA1,aA2){'worklet';return 3.0*aA2-6.0*aA1;}function C(aA1){'worklet';return 3.0*aA1;}function calcBezier(aT,aA1,aA2){'worklet';return((A(aA1,aA2)*aT+B(aA1,aA2))*aT+C(aA1))*aT;}function getSlope(aT,aA1,aA2){'worklet';return 3.0*A(aA1,aA2)*aT*aT+2.0*B(aA1,aA2)*aT+C(aA1);}function binarySubdivide(aX,aA,aB,mX1,mX2){'worklet';var currentX;var currentT;var i=0;do{currentT=aA+(aB-aA)/2.0;currentX=calcBezier(currentT,mX1,mX2)-aX;if(currentX>0.0){aB=currentT;}else{aA=currentT;}}while(Math.abs(currentX)>SUBDIVISION_PRECISION&&++i<SUBDIVISION_MAX_ITERATIONS);return currentT;}function newtonRaphsonIterate(aX,aGuessT,mX1,mX2){'worklet';for(var i=0;i<NEWTON_ITERATIONS;++i){var currentSlope=getSlope(aGuessT,mX1,mX2);if(currentSlope===0.0){return aGuessT;}var currentX=calcBezier(aGuessT,mX1,mX2)-aX;aGuessT-=currentX/currentSlope;}return aGuessT;}function LinearEasing(x){'worklet';return x;}if(!(mX1>=0&&mX1<=1&&mX2>=0&&mX2<=1)){throw new Error('bezier x values must be in [0, 1] range');}if(mX1===mY1&&mX2===mY2){return LinearEasing;}var sampleValues=new Array(kSplineTableSize);for(var i=0;i<kSplineTableSize;++i){sampleValues[i]=calcBezier(i*kSampleStepSize,mX1,mX2);}function getTForX(aX){'worklet';var intervalStart=0.0;var currentSample=1;var lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&sampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;var dist=(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample]);var guessForT=intervalStart+dist*kSampleStepSize;var initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}else if(initialSlope===0.0){return guessForT;}else{return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}}return function BezierEasing(x){'worklet';if(mX1===mY1&&mX2===mY2){return x;}if(x===0){return 0;}if(x===1){return 1;}return calcBezier(getTForX(x),mY1,mY2);};}","map":{"version":3,"names":["Bezier","mX1","mY1","mX2","mY2","NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","kSplineTableSize","kSampleStepSize","A","aA1","aA2","B","C","calcBezier","aT","getSlope","binarySubdivide","aX","aA","aB","currentX","currentT","i","Math","abs","newtonRaphsonIterate","aGuessT","currentSlope","LinearEasing","x","Error","sampleValues","Array","getTForX","intervalStart","currentSample","lastSample","dist","guessForT","initialSlope","BezierEasing"],"sources":["C:/Riaz/Projects/JK/JK_Frontend/node_modules/react-native-reanimated/lib/reanimated2/Bezier.js"],"sourcesContent":["/**\n * https://github.com/gre/bezier-easing\n * BezierEasing - use bezier curve for transition easing function\n * by Gaëtan Renaudeau 2014 - 2015 – MIT License\n */\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\nexport function Bezier(mX1, mY1, mX2, mY2) {\n    'worklet';\n    const NEWTON_ITERATIONS = 4;\n    const NEWTON_MIN_SLOPE = 0.001;\n    const SUBDIVISION_PRECISION = 0.0000001;\n    const SUBDIVISION_MAX_ITERATIONS = 10;\n    const kSplineTableSize = 11;\n    const kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n    function A(aA1, aA2) {\n        'worklet';\n        return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n    }\n    function B(aA1, aA2) {\n        'worklet';\n        return 3.0 * aA2 - 6.0 * aA1;\n    }\n    function C(aA1) {\n        'worklet';\n        return 3.0 * aA1;\n    }\n    // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n    function calcBezier(aT, aA1, aA2) {\n        'worklet';\n        return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n    }\n    // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n    function getSlope(aT, aA1, aA2) {\n        'worklet';\n        return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n    }\n    function binarySubdivide(aX, aA, aB, mX1, mX2) {\n        'worklet';\n        let currentX;\n        let currentT;\n        let i = 0;\n        do {\n            currentT = aA + (aB - aA) / 2.0;\n            currentX = calcBezier(currentT, mX1, mX2) - aX;\n            if (currentX > 0.0) {\n                aB = currentT;\n            }\n            else {\n                aA = currentT;\n            }\n        } while (Math.abs(currentX) > SUBDIVISION_PRECISION &&\n            ++i < SUBDIVISION_MAX_ITERATIONS);\n        return currentT;\n    }\n    function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n        'worklet';\n        for (let i = 0; i < NEWTON_ITERATIONS; ++i) {\n            const currentSlope = getSlope(aGuessT, mX1, mX2);\n            if (currentSlope === 0.0) {\n                return aGuessT;\n            }\n            const currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n            aGuessT -= currentX / currentSlope;\n        }\n        return aGuessT;\n    }\n    function LinearEasing(x) {\n        'worklet';\n        return x;\n    }\n    if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {\n        throw new Error('bezier x values must be in [0, 1] range');\n    }\n    if (mX1 === mY1 && mX2 === mY2) {\n        return LinearEasing;\n    }\n    // FIXME: Float32Array is not available in Hermes right now\n    //\n    // var float32ArraySupported = typeof Float32Array === 'function';\n    // const sampleValues = float32ArraySupported\n    // ? new Float32Array(kSplineTableSize)\n    // : new Array(kSplineTableSize);\n    // Precompute samples table\n    const sampleValues = new Array(kSplineTableSize);\n    for (let i = 0; i < kSplineTableSize; ++i) {\n        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n    }\n    function getTForX(aX) {\n        'worklet';\n        let intervalStart = 0.0;\n        let currentSample = 1;\n        const lastSample = kSplineTableSize - 1;\n        for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n            intervalStart += kSampleStepSize;\n        }\n        --currentSample;\n        // Interpolate to provide an initial guess for t\n        const dist = (aX - sampleValues[currentSample]) /\n            (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n        const guessForT = intervalStart + dist * kSampleStepSize;\n        const initialSlope = getSlope(guessForT, mX1, mX2);\n        if (initialSlope >= NEWTON_MIN_SLOPE) {\n            return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n        }\n        else if (initialSlope === 0.0) {\n            return guessForT;\n        }\n        else {\n            return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n        }\n    }\n    return function BezierEasing(x) {\n        'worklet';\n        if (mX1 === mY1 && mX2 === mY2) {\n            return x; // linear\n        }\n        // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n        if (x === 0) {\n            return 0;\n        }\n        if (x === 1) {\n            return 1;\n        }\n        return calcBezier(getTForX(x), mY1, mY2);\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}