{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}import{val}from\"../val\";import AnimatedNode from\"./AnimatedNode\";import invariant from'invariant';var NEWTON_ITERATIONS=4;var NEWTON_MIN_SLOPE=0.001;var SUBDIVISION_PRECISION=0.0000001;var SUBDIVISION_MAX_ITERATIONS=10;var kSplineTableSize=11;var kSampleStepSize=1.0/(kSplineTableSize-1.0);var float32ArraySupported=typeof Float32Array==='function';function A(aA1,aA2){return 1.0-3.0*aA2+3.0*aA1;}function B(aA1,aA2){return 3.0*aA2-6.0*aA1;}function C(aA1){return 3.0*aA1;}function calcBezier(aT,aA1,aA2){return((A(aA1,aA2)*aT+B(aA1,aA2))*aT+C(aA1))*aT;}function getSlope(aT,aA1,aA2){return 3.0*A(aA1,aA2)*aT*aT+2.0*B(aA1,aA2)*aT+C(aA1);}function binarySubdivide(aX,aA,aB,mX1,mX2){var currentX=0;var currentT=0;var i=0;do{currentT=aA+(aB-aA)/2.0;currentX=calcBezier(currentT,mX1,mX2)-aX;if(currentX>0.0){aB=currentT;}else{aA=currentT;}}while(Math.abs(currentX)>SUBDIVISION_PRECISION&&++i<SUBDIVISION_MAX_ITERATIONS);return currentT;}function newtonRaphsonIterate(aX,aGuessT,mX1,mX2){for(var i=0;i<NEWTON_ITERATIONS;++i){var currentSlope=getSlope(aGuessT,mX1,mX2);if(currentSlope===0.0){return aGuessT;}var currentX=calcBezier(aGuessT,mX1,mX2)-aX;aGuessT-=currentX/currentSlope;}return aGuessT;}function bezier(mX1,mY1,mX2,mY2){var sampleValues=float32ArraySupported?new Float32Array(kSplineTableSize):new Array(kSplineTableSize);if(mX1!==mY1||mX2!==mY2){for(var i=0;i<kSplineTableSize;++i){sampleValues[i]=calcBezier(i*kSampleStepSize,mX1,mX2);}}function getTForX(aX){var intervalStart=0.0;var currentSample=1;var lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&sampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;var dist=(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample]);var guessForT=intervalStart+dist*kSampleStepSize;var initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}else if(initialSlope===0.0){return guessForT;}else{return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}}return function BezierEasing(x){if(mX1===mY1&&mX2===mY2){return x;}if(x===0){return 0;}if(x===1){return 1;}return calcBezier(getTForX(x),mY1,mY2);};}var AnimatedBezier=function(_AnimatedNode){_inherits(AnimatedBezier,_AnimatedNode);var _super=_createSuper(AnimatedBezier);function AnimatedBezier(value,mX1,mY1,mX2,mY2){var _this;_classCallCheck(this,AnimatedBezier);invariant(value instanceof AnimatedNode,\"Reanimated: Bezier node argument should be of type AnimatedNode but got \"+value);_this=_super.call(this,{type:'bezier',mX1:mX1,mY1:mY1,mX2:mX2,mY2:mY2,input:value},[value]);_this._value=value;_this._bezier=bezier(mX1,mY1,mX2,mY2);return _this;}_createClass(AnimatedBezier,[{key:\"toString\",value:function toString(){return\"AnimatedBezier, id: \"+this.__nodeID;}},{key:\"__onEvaluate\",value:function __onEvaluate(){return this._bezier(val(this._value));}}]);return AnimatedBezier;}(AnimatedNode);export{AnimatedBezier as default};","map":{"version":3,"names":["val","AnimatedNode","invariant","NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","kSplineTableSize","kSampleStepSize","float32ArraySupported","Float32Array","A","aA1","aA2","B","C","calcBezier","aT","getSlope","binarySubdivide","aX","aA","aB","mX1","mX2","currentX","currentT","i","Math","abs","newtonRaphsonIterate","aGuessT","currentSlope","bezier","mY1","mY2","sampleValues","Array","getTForX","intervalStart","currentSample","lastSample","dist","guessForT","initialSlope","BezierEasing","x","AnimatedBezier","_AnimatedNode","_inherits","_super","_createSuper","value","_this","_classCallCheck","call","type","input","_value","_bezier","_createClass","key","toString","__nodeID","__onEvaluate","default"],"sources":["C:/Riaz/Projects/JK/JK_Frontend/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedBezier.js"],"sourcesContent":["import { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\nimport invariant from 'invariant';\n\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\nvar NEWTON_ITERATIONS = 4;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\n\nvar kSplineTableSize = 11;\nvar kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\nvar float32ArraySupported = typeof Float32Array === 'function';\n\nfunction A(aA1, aA2) {\n  return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n}\nfunction B(aA1, aA2) {\n  return 3.0 * aA2 - 6.0 * aA1;\n}\nfunction C(aA1) {\n  return 3.0 * aA1;\n}\n\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nfunction calcBezier(aT, aA1, aA2) {\n  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n}\n\n// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\nfunction getSlope(aT, aA1, aA2) {\n  return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n}\n\nfunction binarySubdivide(aX, aA, aB, mX1, mX2) {\n  var currentX = 0;\n  var currentT = 0;\n  var i = 0;\n  do {\n    currentT = aA + (aB - aA) / 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (\n    Math.abs(currentX) > SUBDIVISION_PRECISION &&\n    ++i < SUBDIVISION_MAX_ITERATIONS\n  );\n  return currentT;\n}\n\nfunction newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n  for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n    var currentSlope = getSlope(aGuessT, mX1, mX2);\n    if (currentSlope === 0.0) {\n      return aGuessT;\n    }\n    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n    aGuessT -= currentX / currentSlope;\n  }\n  return aGuessT;\n}\n\nfunction bezier(mX1, mY1, mX2, mY2) {\n  // Precompute samples table\n  var sampleValues = float32ArraySupported\n    ? new Float32Array(kSplineTableSize)\n    : new Array(kSplineTableSize);\n  if (mX1 !== mY1 || mX2 !== mY2) {\n    for (var i = 0; i < kSplineTableSize; ++i) {\n      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n    }\n  }\n\n  function getTForX(aX) {\n    var intervalStart = 0.0;\n    var currentSample = 1;\n    var lastSample = kSplineTableSize - 1;\n\n    for (\n      ;\n      currentSample !== lastSample && sampleValues[currentSample] <= aX;\n      ++currentSample\n    ) {\n      intervalStart += kSampleStepSize;\n    }\n    --currentSample;\n\n    // Interpolate to provide an initial guess for t\n    var dist =\n      (aX - sampleValues[currentSample]) /\n      (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    var guessForT = intervalStart + dist * kSampleStepSize;\n\n    var initialSlope = getSlope(guessForT, mX1, mX2);\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(\n        aX,\n        intervalStart,\n        intervalStart + kSampleStepSize,\n        mX1,\n        mX2\n      );\n    }\n  }\n\n  return function BezierEasing(x) {\n    if (mX1 === mY1 && mX2 === mY2) {\n      return x; // linear\n    }\n    // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n    if (x === 0) {\n      return 0;\n    }\n    if (x === 1) {\n      return 1;\n    }\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n}\n\nexport default class AnimatedBezier extends AnimatedNode {\n  _value;\n  _bezier;\n\n  constructor(value, mX1, mY1, mX2, mY2) {\n    invariant(\n      value instanceof AnimatedNode,\n      `Reanimated: Bezier node argument should be of type AnimatedNode but got ${value}`\n    );\n    super({ type: 'bezier', mX1, mY1, mX2, mY2, input: value }, [value]);\n    this._value = value;\n    this._bezier = bezier(mX1, mY1, mX2, mY2);\n  }\n\n  toString() {\n    return `AnimatedBezier, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    return this._bezier(val(this._value));\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}