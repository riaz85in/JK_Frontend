{"ast":null,"code":"\"use strict\";var _defineProperty=require(\"@babel/runtime/helpers/defineProperty\");var _slicedToArray=require(\"@babel/runtime/helpers/slicedToArray\");var _toConsumableArray=require(\"@babel/runtime/helpers/toConsumableArray\");function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.parseLogBoxLog=exports.parseLogBoxException=exports.parseComponentStack=exports.parseInterpolation=void 0;var UTFSequence_1=__importDefault(require(\"react-native/Libraries/UTFSequence\"));var parseErrorStack_1=__importDefault(require(\"../modules/parseErrorStack\"));var stringifySafe_1=__importDefault(require(\"../modules/stringifySafe\"));var BABEL_TRANSFORM_ERROR_FORMAT=/^(?:TransformError )?(?:SyntaxError: |ReferenceError: )(.*): (.*) \\((\\d+):(\\d+)\\)\\n\\n([\\s\\S]+)/;var BABEL_CODE_FRAME_ERROR_FORMAT=/^(?:TransformError )?(?:(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*):? (?:(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*?)(\\/(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*): ((?:[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+?)\\n([ >]{2}[\\t-\\r 0-9\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]+ \\|(?:[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+|\\x1B(?:[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+)/;var METRO_ERROR_FORMAT=/^(?:InternalError Metro has encountered an error:) ((?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*): ((?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*) \\(([0-9]+):([0-9]+)\\)\\n\\n((?:[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+)/;var SUBSTITUTION=UTFSequence_1.default.BOM+\"%s\";function parseInterpolation(args){var categoryParts=[];var contentParts=[];var substitutionOffsets=[];var remaining=_toConsumableArray(args);if(typeof remaining[0]===\"string\"){var formatString=String(remaining.shift());var formatStringParts=formatString.split(\"%s\");var substitutionCount=formatStringParts.length-1;var substitutions=remaining.splice(0,substitutionCount);var categoryString=\"\";var contentString=\"\";var substitutionIndex=0;for(var formatStringPart of formatStringParts){categoryString+=formatStringPart;contentString+=formatStringPart;if(substitutionIndex<substitutionCount){if(substitutionIndex<substitutions.length){var substitution=typeof substitutions[substitutionIndex]===\"string\"?substitutions[substitutionIndex]:(0,stringifySafe_1.default)(substitutions[substitutionIndex]);substitutionOffsets.push({length:substitution.length,offset:contentString.length});categoryString+=SUBSTITUTION;contentString+=substitution;}else{substitutionOffsets.push({length:2,offset:contentString.length});categoryString+=\"%s\";contentString+=\"%s\";}substitutionIndex++;}}categoryParts.push(categoryString);contentParts.push(contentString);}var remainingArgs=remaining.map(function(arg){return typeof arg===\"string\"?arg:(0,stringifySafe_1.default)(arg);});categoryParts.push.apply(categoryParts,_toConsumableArray(remainingArgs));contentParts.push.apply(contentParts,_toConsumableArray(remainingArgs));return{category:categoryParts.join(\" \"),message:{content:contentParts.join(\" \"),substitutions:substitutionOffsets}};}exports.parseInterpolation=parseInterpolation;function isComponentStack(consoleArgument){var isOldComponentStackFormat=/ {4}in/.test(consoleArgument);var isNewComponentStackFormat=/ {4}at/.test(consoleArgument);var isNewJSCComponentStackFormat=/@.*\\n/.test(consoleArgument);return isOldComponentStackFormat||isNewComponentStackFormat||isNewJSCComponentStackFormat;}function parseComponentStack(message){var stack=(0,parseErrorStack_1.default)(message);if(stack&&stack.length>0){return stack.map(function(frame){return{content:frame.methodName,collapse:frame.collapse||false,fileName:frame.file==null?\"unknown\":frame.file,location:{column:frame.column==null?-1:frame.column,row:frame.lineNumber==null?-1:frame.lineNumber}};});}return message.split(/\\n {4}in /g).map(function(s){if(!s){return null;}var match=s.match(/(.*) \\(at (.*\\.js):([\\d]+)\\)/);if(!match){return null;}var _match$slice=match.slice(1),_match$slice2=_slicedToArray(_match$slice,3),content=_match$slice2[0],fileName=_match$slice2[1],row=_match$slice2[2];return{content:content,fileName:fileName,location:{column:-1,row:parseInt(row,10)}};}).filter(Boolean);}exports.parseComponentStack=parseComponentStack;function parseLogBoxException(error){var message=error.originalMessage!=null?error.originalMessage:\"Unknown\";var metroInternalError=message.match(METRO_ERROR_FORMAT);if(metroInternalError){var _metroInternalError$s=metroInternalError.slice(1),_metroInternalError$s2=_slicedToArray(_metroInternalError$s,5),content=_metroInternalError$s2[0],fileName=_metroInternalError$s2[1],row=_metroInternalError$s2[2],column=_metroInternalError$s2[3],codeFrame=_metroInternalError$s2[4];return{level:\"fatal\",type:\"Metro Error\",stack:[],isComponentError:false,componentStack:[],codeFrame:{fileName:fileName,location:{row:parseInt(row,10),column:parseInt(column,10)},content:codeFrame},message:{content:content,substitutions:[]},category:fileName+\"-\"+row+\"-\"+column};}var babelTransformError=message.match(BABEL_TRANSFORM_ERROR_FORMAT);if(babelTransformError){var _babelTransformError$=babelTransformError.slice(1),_babelTransformError$2=_slicedToArray(_babelTransformError$,5),_fileName=_babelTransformError$2[0],_content=_babelTransformError$2[1],_row=_babelTransformError$2[2],_column=_babelTransformError$2[3],_codeFrame=_babelTransformError$2[4];return{level:\"syntax\",stack:[],isComponentError:false,componentStack:[],codeFrame:{fileName:_fileName,location:{row:parseInt(_row,10),column:parseInt(_column,10)},content:_codeFrame},message:{content:_content,substitutions:[]},category:_fileName+\"-\"+_row+\"-\"+_column};}var babelCodeFrameError=message.match(BABEL_CODE_FRAME_ERROR_FORMAT);if(babelCodeFrameError){var _babelCodeFrameError$=babelCodeFrameError.slice(1),_babelCodeFrameError$2=_slicedToArray(_babelCodeFrameError$,3),_fileName2=_babelCodeFrameError$2[0],_content2=_babelCodeFrameError$2[1],_codeFrame2=_babelCodeFrameError$2[2];return{level:\"syntax\",stack:[],isComponentError:false,componentStack:[],codeFrame:{fileName:_fileName2,location:null,content:_codeFrame2},message:{content:_content2,substitutions:[]},category:_fileName2+\"-\"+1+\"-\"+1};}if(message.match(/^TransformError /)){return{level:\"syntax\",stack:error.stack,isComponentError:error.isComponentError,componentStack:[],message:{content:message,substitutions:[]},category:message};}var componentStack=error.componentStack;if(error.isFatal||error.isComponentError){return _objectSpread({level:\"fatal\",stack:error.stack,isComponentError:error.isComponentError,componentStack:componentStack!=null?parseComponentStack(componentStack):[]},parseInterpolation([message]));}if(componentStack!=null){return _objectSpread({level:\"error\",stack:error.stack,isComponentError:error.isComponentError,componentStack:parseComponentStack(componentStack)},parseInterpolation([message]));}return _objectSpread({level:\"error\",stack:error.stack,isComponentError:error.isComponentError},parseLogBoxLog([message]));}exports.parseLogBoxException=parseLogBoxException;function parseLogBoxLog(args){var message=args[0];var argsWithoutComponentStack=[];var componentStack=[];if(typeof message===\"string\"&&message.slice(-2)===\"%s\"&&args.length>0){var lastArg=args[args.length-1];if(typeof lastArg===\"string\"&&isComponentStack(lastArg)){argsWithoutComponentStack=args.slice(0,-1);argsWithoutComponentStack[0]=message.slice(0,-2);componentStack=parseComponentStack(lastArg);}}if(componentStack.length===0){for(var arg of args){if(typeof arg===\"string\"&&isComponentStack(arg)){var messageEndIndex=arg.search(/\\n {4}(in|at) /);if(messageEndIndex<0){messageEndIndex=arg.search(/\\n/);}if(messageEndIndex>0){argsWithoutComponentStack.push(arg.slice(0,messageEndIndex));}componentStack=parseComponentStack(arg);}else{argsWithoutComponentStack.push(arg);}}}return _objectSpread(_objectSpread({},parseInterpolation(argsWithoutComponentStack)),{},{componentStack:componentStack});}exports.parseLogBoxLog=parseLogBoxLog;","map":{"version":3,"names":["UTFSequence_1","__importDefault","require","parseErrorStack_1","stringifySafe_1","BABEL_TRANSFORM_ERROR_FORMAT","BABEL_CODE_FRAME_ERROR_FORMAT","METRO_ERROR_FORMAT","SUBSTITUTION","default","BOM","parseInterpolation","args","categoryParts","contentParts","substitutionOffsets","remaining","_toConsumableArray","formatString","String","shift","formatStringParts","split","substitutionCount","length","substitutions","splice","categoryString","contentString","substitutionIndex","formatStringPart","substitution","push","offset","remainingArgs","map","arg","apply","category","join","message","content","exports","isComponentStack","consoleArgument","isOldComponentStackFormat","test","isNewComponentStackFormat","isNewJSCComponentStackFormat","parseComponentStack","stack","frame","methodName","collapse","fileName","file","location","column","row","lineNumber","s","match","_match$slice","slice","_match$slice2","_slicedToArray","parseInt","filter","Boolean","parseLogBoxException","error","originalMessage","metroInternalError","_metroInternalError$s","_metroInternalError$s2","codeFrame","level","type","isComponentError","componentStack","babelTransformError","_babelTransformError$","_babelTransformError$2","babelCodeFrameError","_babelCodeFrameError$","_babelCodeFrameError$2","isFatal","_objectSpread","parseLogBoxLog","argsWithoutComponentStack","lastArg","messageEndIndex","search"],"sources":["C:\\Riaz\\Projects\\JK\\JK_Frontend\\node_modules\\@expo\\metro-runtime\\src\\error-overlay\\Data\\parseLogBoxLog.tsx"],"sourcesContent":["/**\n * Copyright (c) Evan Bacon.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// @ts-expect-error\nimport UTFSequence from \"react-native/Libraries/UTFSequence\";\n\nimport type { LogBoxLogData } from \"./LogBoxLog\";\nimport parseErrorStack from \"../modules/parseErrorStack\";\nimport stringifySafe from \"../modules/stringifySafe\";\ntype ExceptionData = any;\n\nconst BABEL_TRANSFORM_ERROR_FORMAT =\n  /^(?:TransformError )?(?:SyntaxError: |ReferenceError: )(.*): (.*) \\((\\d+):(\\d+)\\)\\n\\n([\\s\\S]+)/;\nconst BABEL_CODE_FRAME_ERROR_FORMAT =\n  /^(?:TransformError )?(?:.*):? (?:.*?)(\\/.*): ([\\s\\S]+?)\\n([ >]{2}[\\d\\s]+ \\|[\\s\\S]+|\\u{001b}[\\s\\S]+)/u;\nconst METRO_ERROR_FORMAT =\n  /^(?:InternalError Metro has encountered an error:) (.*): (.*) \\((\\d+):(\\d+)\\)\\n\\n([\\s\\S]+)/u;\n\nexport type ExtendedExceptionData = ExceptionData & {\n  isComponentError: boolean;\n  [key: string]: any;\n};\nexport type Category = string;\nexport type CodeFrame = {\n  content: string;\n  location?: {\n    row: number;\n    column: number;\n    [key: string]: any;\n  } | null;\n  fileName: string;\n\n  // TODO: When React switched to using call stack frames,\n  // we gained the ability to use the collapse flag, but\n  // it is not integrated into the LogBox UI.\n  collapse?: boolean;\n};\n\nexport type Message = {\n  content: string;\n  substitutions: {\n    length: number;\n    offset: number;\n  }[];\n};\n\nexport type ComponentStack = CodeFrame[];\n\nconst SUBSTITUTION = UTFSequence.BOM + \"%s\";\n\nexport function parseInterpolation(args: readonly any[]): {\n  category: Category;\n  message: Message;\n} {\n  const categoryParts: string[] = [];\n  const contentParts: string[] = [];\n  const substitutionOffsets: { length: number; offset: number }[] = [];\n\n  const remaining = [...args];\n  if (typeof remaining[0] === \"string\") {\n    const formatString = String(remaining.shift());\n    const formatStringParts = formatString.split(\"%s\");\n    const substitutionCount = formatStringParts.length - 1;\n    const substitutions = remaining.splice(0, substitutionCount);\n\n    let categoryString = \"\";\n    let contentString = \"\";\n\n    let substitutionIndex = 0;\n    for (const formatStringPart of formatStringParts) {\n      categoryString += formatStringPart;\n      contentString += formatStringPart;\n\n      if (substitutionIndex < substitutionCount) {\n        if (substitutionIndex < substitutions.length) {\n          // Don't stringify a string type.\n          // It adds quotation mark wrappers around the string,\n          // which causes the LogBox to look odd.\n          const substitution =\n            typeof substitutions[substitutionIndex] === \"string\"\n              ? substitutions[substitutionIndex]\n              : stringifySafe(substitutions[substitutionIndex]);\n          substitutionOffsets.push({\n            length: substitution.length,\n            offset: contentString.length,\n          });\n\n          categoryString += SUBSTITUTION;\n          contentString += substitution;\n        } else {\n          substitutionOffsets.push({\n            length: 2,\n            offset: contentString.length,\n          });\n\n          categoryString += \"%s\";\n          contentString += \"%s\";\n        }\n\n        substitutionIndex++;\n      }\n    }\n\n    categoryParts.push(categoryString);\n    contentParts.push(contentString);\n  }\n\n  const remainingArgs = remaining.map((arg) => {\n    // Don't stringify a string type.\n    // It adds quotation mark wrappers around the string,\n    // which causes the LogBox to look odd.\n    return typeof arg === \"string\" ? arg : stringifySafe(arg);\n  });\n  categoryParts.push(...remainingArgs);\n  contentParts.push(...remainingArgs);\n\n  return {\n    category: categoryParts.join(\" \"),\n    message: {\n      content: contentParts.join(\" \"),\n      substitutions: substitutionOffsets,\n    },\n  };\n}\n\nfunction isComponentStack(consoleArgument: string) {\n  const isOldComponentStackFormat = / {4}in/.test(consoleArgument);\n  const isNewComponentStackFormat = / {4}at/.test(consoleArgument);\n  const isNewJSCComponentStackFormat = /@.*\\n/.test(consoleArgument);\n\n  return (\n    isOldComponentStackFormat ||\n    isNewComponentStackFormat ||\n    isNewJSCComponentStackFormat\n  );\n}\n\nexport function parseComponentStack(message: string): ComponentStack {\n  // In newer versions of React, the component stack is formatted as a call stack frame.\n  // First try to parse the component stack as a call stack frame, and if that doesn't\n  // work then we'll fallback to the old custom component stack format parsing.\n  const stack = parseErrorStack(message);\n  if (stack && stack.length > 0) {\n    return stack.map((frame) => ({\n      content: frame.methodName,\n      collapse: frame.collapse || false,\n      fileName: frame.file == null ? \"unknown\" : frame.file,\n      location: {\n        column: frame.column == null ? -1 : frame.column,\n        row: frame.lineNumber == null ? -1 : frame.lineNumber,\n      },\n    }));\n  }\n\n  return message\n    .split(/\\n {4}in /g)\n    .map((s) => {\n      if (!s) {\n        return null;\n      }\n      const match = s.match(/(.*) \\(at (.*\\.js):([\\d]+)\\)/);\n      if (!match) {\n        return null;\n      }\n\n      const [content, fileName, row] = match.slice(1);\n      return {\n        content,\n        fileName,\n        location: { column: -1, row: parseInt(row, 10) },\n      };\n    })\n    .filter(Boolean) as ComponentStack;\n}\n\nexport function parseLogBoxException(\n  error: ExtendedExceptionData\n): LogBoxLogData {\n  const message =\n    error.originalMessage != null ? error.originalMessage : \"Unknown\";\n\n  const metroInternalError = message.match(METRO_ERROR_FORMAT);\n  if (metroInternalError) {\n    const [content, fileName, row, column, codeFrame] =\n      metroInternalError.slice(1);\n\n    return {\n      level: \"fatal\",\n      type: \"Metro Error\",\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName,\n        location: {\n          row: parseInt(row, 10),\n          column: parseInt(column, 10),\n        },\n        content: codeFrame,\n      },\n      message: {\n        content,\n        substitutions: [],\n      },\n      category: `${fileName}-${row}-${column}`,\n    };\n  }\n\n  const babelTransformError = message.match(BABEL_TRANSFORM_ERROR_FORMAT);\n  if (babelTransformError) {\n    // Transform errors are thrown from inside the Babel transformer.\n    const [fileName, content, row, column, codeFrame] =\n      babelTransformError.slice(1);\n\n    return {\n      level: \"syntax\",\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName,\n        location: {\n          row: parseInt(row, 10),\n          column: parseInt(column, 10),\n        },\n        content: codeFrame,\n      },\n      message: {\n        content,\n        substitutions: [],\n      },\n      category: `${fileName}-${row}-${column}`,\n    };\n  }\n\n  const babelCodeFrameError = message.match(BABEL_CODE_FRAME_ERROR_FORMAT);\n\n  if (babelCodeFrameError) {\n    // Codeframe errors are thrown from any use of buildCodeFrameError.\n    const [fileName, content, codeFrame] = babelCodeFrameError.slice(1);\n    return {\n      level: \"syntax\",\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName,\n        location: null, // We are not given the location.\n        content: codeFrame,\n      },\n      message: {\n        content,\n        substitutions: [],\n      },\n      category: `${fileName}-${1}-${1}`,\n    };\n  }\n\n  if (message.match(/^TransformError /)) {\n    return {\n      level: \"syntax\",\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack: [],\n      message: {\n        content: message,\n        substitutions: [],\n      },\n      category: message,\n    };\n  }\n\n  const componentStack = error.componentStack;\n  if (error.isFatal || error.isComponentError) {\n    return {\n      level: \"fatal\",\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack:\n        componentStack != null ? parseComponentStack(componentStack) : [],\n      ...parseInterpolation([message]),\n    };\n  }\n\n  if (componentStack != null) {\n    // It is possible that console errors have a componentStack.\n    return {\n      level: \"error\",\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack: parseComponentStack(componentStack),\n      ...parseInterpolation([message]),\n    };\n  }\n\n  // Most `console.error` calls won't have a componentStack. We parse them like\n  // regular logs which have the component stack burried in the message.\n  return {\n    level: \"error\",\n    stack: error.stack,\n    isComponentError: error.isComponentError,\n    ...parseLogBoxLog([message]),\n  };\n}\n\nexport function parseLogBoxLog(args: readonly any[]): {\n  componentStack: ComponentStack;\n  category: Category;\n  message: Message;\n} {\n  const message = args[0];\n  let argsWithoutComponentStack: any[] = [];\n  let componentStack: ComponentStack = [];\n\n  // Extract component stack from warnings like \"Some warning%s\".\n  if (\n    typeof message === \"string\" &&\n    message.slice(-2) === \"%s\" &&\n    args.length > 0\n  ) {\n    const lastArg = args[args.length - 1];\n    if (typeof lastArg === \"string\" && isComponentStack(lastArg)) {\n      argsWithoutComponentStack = args.slice(0, -1);\n      argsWithoutComponentStack[0] = message.slice(0, -2);\n      componentStack = parseComponentStack(lastArg);\n    }\n  }\n\n  if (componentStack.length === 0) {\n    // Try finding the component stack elsewhere.\n    for (const arg of args) {\n      if (typeof arg === \"string\" && isComponentStack(arg)) {\n        // Strip out any messages before the component stack.\n        let messageEndIndex = arg.search(/\\n {4}(in|at) /);\n        if (messageEndIndex < 0) {\n          // Handle JSC component stacks.\n          messageEndIndex = arg.search(/\\n/);\n        }\n        if (messageEndIndex > 0) {\n          argsWithoutComponentStack.push(arg.slice(0, messageEndIndex));\n        }\n\n        componentStack = parseComponentStack(arg);\n      } else {\n        argsWithoutComponentStack.push(arg);\n      }\n    }\n  }\n\n  return {\n    ...parseInterpolation(argsWithoutComponentStack),\n    componentStack,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}