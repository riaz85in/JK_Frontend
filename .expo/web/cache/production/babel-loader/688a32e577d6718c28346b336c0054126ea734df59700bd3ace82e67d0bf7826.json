{"ast":null,"code":"import*as SplashModule from\"expo-splash-screen\";import{nanoid}from\"nanoid/non-secure\";import*as React from\"react\";import Platform from\"react-native-web/dist/exports/Platform\";var globalStack=[];export function SplashScreen(){useGlobalSplash();return null;}function useGlobalSplash(){var stack=React.useRef(null);React.useEffect(function(){stack.current=SplashScreen._pushEntry();return function(){if(stack.current){SplashScreen._popEntry(stack.current);}};},[]);}SplashScreen.hideAsync=function(){SplashModule.hideAsync();globalStack.length=0;};var _preventAutoHideAsyncInvoked=false;SplashScreen.preventAutoHideAsync=function(){var _ErrorUtils;if(_preventAutoHideAsyncInvoked){return;}_preventAutoHideAsyncInvoked=true;if(Platform.OS!==\"web\"&&(_ErrorUtils=ErrorUtils)!=null&&_ErrorUtils.getGlobalHandler){var originalHandler=ErrorUtils.getGlobalHandler();ErrorUtils.setGlobalHandler(function(error,isFatal){SplashScreen.hideAsync();originalHandler(error,isFatal);});}SplashModule.preventAutoHideAsync();};SplashScreen._pushEntry=function(){var entry=nanoid();globalStack.push(entry);SplashScreen.preventAutoHideAsync();return entry;};SplashScreen._popEntry=function(entry){var index=globalStack.indexOf(entry);if(index!==-1){globalStack.splice(index,1);}if(globalStack.length===0){SplashScreen.hideAsync();}};","map":{"version":3,"names":["SplashModule","nanoid","React","Platform","globalStack","SplashScreen","useGlobalSplash","stack","useRef","useEffect","current","_pushEntry","_popEntry","hideAsync","length","_preventAutoHideAsyncInvoked","preventAutoHideAsync","_ErrorUtils","OS","ErrorUtils","getGlobalHandler","originalHandler","setGlobalHandler","error","isFatal","entry","push","index","indexOf","splice"],"sources":["C:/Riaz/Projects/JK/JK_Frontend/node_modules/expo-router/src/views/Splash.tsx"],"sourcesContent":["import * as SplashModule from \"expo-splash-screen\";\nimport { nanoid } from \"nanoid/non-secure\";\nimport * as React from \"react\";\nimport { Platform } from \"react-native\";\n\nconst globalStack: string[] = [];\n\n/**\n * A stack based component for keeping the splash screen visible.\n * Useful for stacked requests that need to be completed before the app is ready.\n * After all instances have been unmounted, the splash screen will be hidden.\n *\n * @example\n * ```tsx\n * function App() {\n *   const [isLoading, setIsLoading] = React.useState(true);\n *\n *   if (isLoading) {\n *     return <SplashScreen />\n *   }\n *\n *   return <Text>Ready!</Text>\n * }\n * ```\n */\nexport function SplashScreen() {\n  useGlobalSplash();\n  return null;\n}\n\nfunction useGlobalSplash() {\n  const stack = React.useRef<string | null>(null);\n\n  React.useEffect(() => {\n    // Create a stack entry on component mount\n    stack.current = SplashScreen._pushEntry();\n    return () => {\n      if (stack.current) {\n        // Update on component unmount\n        SplashScreen._popEntry(stack.current);\n      }\n    };\n  }, []);\n}\n\nSplashScreen.hideAsync = () => {\n  SplashModule.hideAsync();\n  globalStack.length = 0;\n};\n\nlet _preventAutoHideAsyncInvoked = false;\n\nSplashScreen.preventAutoHideAsync = () => {\n  // Memoize, this should only be called once.\n  if (_preventAutoHideAsyncInvoked) {\n    return;\n  }\n  _preventAutoHideAsyncInvoked = true;\n  // Append error handling to ensure any uncaught exceptions result in the splash screen being hidden.\n  if (Platform.OS !== \"web\" && ErrorUtils?.getGlobalHandler) {\n    const originalHandler = ErrorUtils.getGlobalHandler();\n    ErrorUtils.setGlobalHandler((error, isFatal) => {\n      SplashScreen.hideAsync();\n      originalHandler(error, isFatal);\n    });\n  }\n  SplashModule.preventAutoHideAsync();\n};\n\nSplashScreen._pushEntry = (): any => {\n  const entry = nanoid();\n  globalStack.push(entry);\n  SplashScreen.preventAutoHideAsync();\n  return entry;\n};\n\nSplashScreen._popEntry = (entry: string) => {\n  const index = globalStack.indexOf(entry);\n  if (index !== -1) {\n    globalStack.splice(index, 1);\n  }\n  if (globalStack.length === 0) {\n    SplashScreen.hideAsync();\n  }\n};\n\n// TODO: Add some detection for if the splash screen is visible\n"],"mappings":"AAAA,MAAO,GAAK,CAAAA,YAAY,KAAM,oBAAoB,CAClD,OAASC,MAAM,KAAQ,mBAAmB,CAC1C,MAAO,GAAK,CAAAC,KAAK,KAAM,OAAO,CAAC,OAAAC,QAAA,8CAG/B,GAAM,CAAAC,WAAqB,CAAG,EAAE,CAoBhC,MAAO,SAAS,CAAAC,YAAYA,CAAA,CAAG,CAC7BC,eAAe,EAAE,CACjB,MAAO,KAAI,CACb,CAEA,QAAS,CAAAA,eAAeA,CAAA,CAAG,CACzB,GAAM,CAAAC,KAAK,CAAGL,KAAK,CAACM,MAAM,CAAgB,IAAI,CAAC,CAE/CN,KAAK,CAACO,SAAS,CAAC,UAAM,CAEpBF,KAAK,CAACG,OAAO,CAAGL,YAAY,CAACM,UAAU,EAAE,CACzC,MAAO,WAAM,CACX,GAAIJ,KAAK,CAACG,OAAO,CAAE,CAEjBL,YAAY,CAACO,SAAS,CAACL,KAAK,CAACG,OAAO,CAAC,CACvC,CACF,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CACR,CAEAL,YAAY,CAACQ,SAAS,CAAG,UAAM,CAC7Bb,YAAY,CAACa,SAAS,EAAE,CACxBT,WAAW,CAACU,MAAM,CAAG,CAAC,CACxB,CAAC,CAED,GAAI,CAAAC,4BAA4B,CAAG,KAAK,CAExCV,YAAY,CAACW,oBAAoB,CAAG,UAAM,KAAAC,WAAA,CAExC,GAAIF,4BAA4B,CAAE,CAChC,OACF,CACAA,4BAA4B,CAAG,IAAI,CAEnC,GAAIZ,QAAQ,CAACe,EAAE,GAAK,KAAK,GAAAD,WAAA,CAAIE,UAAU,SAAVF,WAAA,CAAYG,gBAAgB,CAAE,CACzD,GAAM,CAAAC,eAAe,CAAGF,UAAU,CAACC,gBAAgB,EAAE,CACrDD,UAAU,CAACG,gBAAgB,CAAC,SAACC,KAAK,CAAEC,OAAO,CAAK,CAC9CnB,YAAY,CAACQ,SAAS,EAAE,CACxBQ,eAAe,CAACE,KAAK,CAAEC,OAAO,CAAC,CACjC,CAAC,CAAC,CACJ,CACAxB,YAAY,CAACgB,oBAAoB,EAAE,CACrC,CAAC,CAEDX,YAAY,CAACM,UAAU,CAAG,UAAW,CACnC,GAAM,CAAAc,KAAK,CAAGxB,MAAM,EAAE,CACtBG,WAAW,CAACsB,IAAI,CAACD,KAAK,CAAC,CACvBpB,YAAY,CAACW,oBAAoB,EAAE,CACnC,MAAO,CAAAS,KAAK,CACd,CAAC,CAEDpB,YAAY,CAACO,SAAS,CAAG,SAACa,KAAa,CAAK,CAC1C,GAAM,CAAAE,KAAK,CAAGvB,WAAW,CAACwB,OAAO,CAACH,KAAK,CAAC,CACxC,GAAIE,KAAK,GAAK,CAAC,CAAC,CAAE,CAChBvB,WAAW,CAACyB,MAAM,CAACF,KAAK,CAAE,CAAC,CAAC,CAC9B,CACA,GAAIvB,WAAW,CAACU,MAAM,GAAK,CAAC,CAAE,CAC5BT,YAAY,CAACQ,SAAS,EAAE,CAC1B,CACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}