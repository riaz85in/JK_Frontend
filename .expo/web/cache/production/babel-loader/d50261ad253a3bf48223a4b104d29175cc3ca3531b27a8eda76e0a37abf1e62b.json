{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"preserveGroups\",\"preserveDynamicRoutes\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import{validatePathConfig}from\"@react-navigation/core\";import*as queryString from\"query-string\";import{matchDeepDynamicRouteName,matchDynamicName,matchGroupName}from\"../matchers\";var DEFAULT_SCREENS={};var getActiveRoute=function getActiveRoute(state){var route=typeof state.index===\"number\"?state.routes[state.index]:state.routes[state.routes.length-1];if(route.state){return getActiveRoute(route.state);}if(route&&isInvalidParams(route.params)){return getActiveRoute(createFakeState(route.params));}return route;};function createFakeState(params){return{stale:false,type:\"UNKNOWN\",key:\"UNKNOWN\",index:0,routeNames:[],routes:[{key:\"UNKNOWN\",name:params.screen,params:params.params,path:params.path}]};}function segmentMatchesConvention(segment){return segment===\"index\"||matchDynamicName(segment)!=null||matchGroupName(segment)!=null||matchDeepDynamicRouteName(segment)!=null;}function encodeURIComponentPreservingBrackets(str){return encodeURIComponent(str).replace(/%5B/g,\"[\").replace(/%5D/g,\"]\");}export default function getPathFromState(state,_options){return getPathDataFromState(state,_options).path;}export function getPathDataFromState(state){var _options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{screens:DEFAULT_SCREENS};if(state==null){throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");}var preserveGroups=_options.preserveGroups,preserveDynamicRoutes=_options.preserveDynamicRoutes,options=_objectWithoutProperties(_options,_excluded);validatePathConfig(options);if(Object.is(options.screens,DEFAULT_SCREENS)){throw Error(\"You must pass a 'screens' object to 'getPathFromState' to generate a path.\");}return getPathFromResolvedState(state,createNormalizedConfigs(options.screens),{preserveGroups:preserveGroups,preserveDynamicRoutes:preserveDynamicRoutes});}function processParamsWithUserSettings(configItem,params){var stringify=configItem==null?void 0:configItem.stringify;return Object.fromEntries(Object.entries(params).map(function(_ref){var _ref2=_slicedToArray(_ref,2),key=_ref2[0],value=_ref2[1];return[key,stringify!=null&&stringify[key]?stringify[key](value):Array.isArray(value)?value:String(value)];}));}export function deepEqual(a,b){if(a===b){return true;}if(Array.isArray(a)&&Array.isArray(b)){if(a.length!==b.length){return false;}for(var i=0;i<a.length;i++){if(!deepEqual(a[i],b[i])){return false;}}return true;}if(typeof a===\"object\"&&typeof b===\"object\"){var keysA=Object.keys(a);var keysB=Object.keys(b);if(keysA.length!==keysB.length){return false;}for(var key of keysA){if(!deepEqual(a[key],b[key])){return false;}}return true;}return false;}function walkConfigItems(route,focusedRoute,configs,_ref3){var preserveDynamicRoutes=_ref3.preserveDynamicRoutes;if(!route.state&&isInvalidParams(route.params)){route.state=createFakeState(route.params);}var pattern=null;var focusedParams;var collectedParams={};while(route.name in configs){var _route$state$index;var configItem=configs[route.name];var inputPattern=configItem.pattern;if(inputPattern==null){throw new Error(\"Unexpected: No pattern found for route \"+route.name);}pattern=inputPattern;if(route.params){var params=processParamsWithUserSettings(configItem,route.params);if(pattern){Object.assign(collectedParams,params);}if(deepEqual(focusedRoute,route)){if(preserveDynamicRoutes){focusedParams=params;}else{focusedParams=getParamsWithConventionsCollapsed({params:params,pattern:pattern,routeName:route.name});}}}if(!route.state&&isInvalidParams(route.params)){route.state=createFakeState(route.params);}if(!configItem.screens||route.state===undefined){var _configItem$screens$c;if(configItem.initialRouteName&&configItem.screens&&configItem.initialRouteName in configItem.screens&&(_configItem$screens$c=configItem.screens[configItem.initialRouteName])!=null&&_configItem$screens$c.pattern){var initialRouteConfig=configItem.screens[configItem.initialRouteName];pattern=initialRouteConfig.pattern;if(focusedParams){if(!preserveDynamicRoutes){focusedParams=getParamsWithConventionsCollapsed({params:focusedParams,pattern:pattern,routeName:route.name});}}}break;}var index=(_route$state$index=route.state.index)!=null?_route$state$index:route.state.routes.length-1;var nextRoute=route.state.routes[index];var nestedScreens=configItem.screens;if(nestedScreens&&nextRoute.name in nestedScreens){route=nextRoute;configs=nestedScreens;}else{break;}}if(pattern==null){throw new Error(\"No pattern found for route \\\"\"+route.name+\"\\\". Options are: \"+Object.keys(configs).join(\", \")+\".\");}if(pattern&&!focusedParams&&focusedRoute.params){if(preserveDynamicRoutes){focusedParams=focusedRoute.params;}else{focusedParams=getParamsWithConventionsCollapsed({params:focusedRoute.params,pattern:pattern,routeName:route.name});}Object.assign(focusedParams,collectedParams);}return{pattern:pattern,nextRoute:route,focusedParams:focusedParams,params:collectedParams};}function getPathFromResolvedState(state,configs,_ref4){var preserveGroups=_ref4.preserveGroups,preserveDynamicRoutes=_ref4.preserveDynamicRoutes;var path=\"\";var current=state;var allParams={};while(current){var _current$index,_configs$nextRoute$na,_nextRoute$state$rout,_nextRoute$state$rout2,_nextRoute$state$inde,_nextRoute$state;path+=\"/\";var route=current.routes[(_current$index=current.index)!=null?_current$index:0];if(!route.state&&isInvalidParams(route.params)){route.state=createFakeState(route.params);}var _walkConfigItems=walkConfigItems(route,getActiveRoute(current),_objectSpread({},configs),{preserveDynamicRoutes:preserveDynamicRoutes}),pattern=_walkConfigItems.pattern,params=_walkConfigItems.params,nextRoute=_walkConfigItems.nextRoute,focusedParams=_walkConfigItems.focusedParams;Object.assign(allParams,params);path+=getPathWithConventionsCollapsed({pattern:pattern,routePath:nextRoute.path,params:allParams,initialRouteName:(_configs$nextRoute$na=configs[nextRoute.name])==null?void 0:_configs$nextRoute$na.initialRouteName,preserveGroups:preserveGroups,preserveDynamicRoutes:preserveDynamicRoutes});if(nextRoute.state&&configs[(_nextRoute$state$rout=nextRoute.state.routes)==null?void 0:(_nextRoute$state$rout2=_nextRoute$state$rout[(_nextRoute$state$inde=(_nextRoute$state=nextRoute.state)==null?void 0:_nextRoute$state.index)!=null?_nextRoute$state$inde:0])==null?void 0:_nextRoute$state$rout2.name]){current=nextRoute.state;}else{if(focusedParams){for(var param in focusedParams){if(focusedParams[param]===\"undefined\"){delete focusedParams[param];}}var query=queryString.stringify(focusedParams,{sort:false});if(query){path+=\"?\"+query;}}break;}}return{path:basicSanitizePath(path),params:allParams};}function getPathWithConventionsCollapsed(_ref5){var pattern=_ref5.pattern,routePath=_ref5.routePath,params=_ref5.params,preserveGroups=_ref5.preserveGroups,preserveDynamicRoutes=_ref5.preserveDynamicRoutes,initialRouteName=_ref5.initialRouteName;var segments=pattern.split(\"/\");return segments.map(function(p,i){var name=getParamName(p);if(p.startsWith(\"*\")){if(preserveDynamicRoutes){return\"[...\"+name+\"]\";}if(params[name]){return params[name].join(\"/\");}if(i===0){return routePath;}return routePath==null?void 0:routePath.split(\"/\").slice(i+1).join(\"/\");}if(p.startsWith(\":\")){if(preserveDynamicRoutes){return\"[\"+name+\"]\";}return params[name];}if(!preserveGroups&&matchGroupName(p)!=null){if(segments.length-1===i){if(initialRouteName){if(segmentMatchesConvention(initialRouteName)){return\"\";}return encodeURIComponentPreservingBrackets(initialRouteName);}}return\"\";}return encodeURIComponentPreservingBrackets(p);}).map(function(v){return v!=null?v:\"\";}).join(\"/\");}function getParamsWithConventionsCollapsed(_ref6){var pattern=_ref6.pattern,routeName=_ref6.routeName,params=_ref6.params;var processedParams=_objectSpread({},params);var segments=pattern.split(\"/\");segments.filter(function(segment){return segment.startsWith(\":\");}).forEach(function(segment){var name=getParamName(segment);delete processedParams[name];});if(segments.some(function(segment){return segment.startsWith(\"*\");})){var _matchDeepDynamicRout;var name=(_matchDeepDynamicRout=matchDeepDynamicRouteName(routeName))!=null?_matchDeepDynamicRout:routeName;delete processedParams[name];}return processedParams;}function basicSanitizePath(path){var simplifiedPath=path.replace(/\\/+/g,\"/\");if(simplifiedPath.length<=1){return simplifiedPath;}return simplifiedPath.replace(/\\/$/,\"\");}function isInvalidParams(params){if(!params){return false;}if(\"params\"in params&&typeof params.params===\"object\"&&!!params.params){return true;}return\"initial\"in params&&typeof params.initial===\"boolean\"&&\"screen\"in params;}var getParamName=function getParamName(pattern){return pattern.replace(/^[:*]/,\"\").replace(/\\?$/,\"\");};var joinPaths=function joinPaths(){var _ref7;for(var _len=arguments.length,paths=new Array(_len),_key=0;_key<_len;_key++){paths[_key]=arguments[_key];}return(_ref7=[]).concat.apply(_ref7,_toConsumableArray(paths.map(function(p){return p.split(\"/\");}))).filter(Boolean).join(\"/\");};var createConfigItem=function createConfigItem(config,parentPattern){if(typeof config===\"string\"){var _pattern=parentPattern?joinPaths(parentPattern,config):config;return{pattern:_pattern};}if(config.exact&&config.path===undefined){throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");}var pattern=config.exact!==true?joinPaths(parentPattern||\"\",config.path||\"\"):config.path||\"\";var screens=config.screens?createNormalizedConfigs(config.screens,pattern):undefined;return{pattern:pattern==null?void 0:pattern.split(\"/\").filter(Boolean).join(\"/\"),stringify:config.stringify,screens:screens,initialRouteName:config.initialRouteName};};var createNormalizedConfigs=function createNormalizedConfigs(options,pattern){return Object.fromEntries(Object.entries(options).map(function(_ref8){var _ref9=_slicedToArray(_ref8,2),name=_ref9[0],c=_ref9[1];return[name,createConfigItem(c,pattern)];}));};","map":{"version":3,"names":["validatePathConfig","queryString","matchDeepDynamicRouteName","matchDynamicName","matchGroupName","DEFAULT_SCREENS","getActiveRoute","state","route","index","routes","length","isInvalidParams","params","createFakeState","stale","type","key","routeNames","name","screen","path","segmentMatchesConvention","segment","encodeURIComponentPreservingBrackets","str","encodeURIComponent","replace","getPathFromState","_options","getPathDataFromState","arguments","undefined","screens","Error","preserveGroups","preserveDynamicRoutes","options","_objectWithoutProperties","_excluded","Object","is","getPathFromResolvedState","createNormalizedConfigs","processParamsWithUserSettings","configItem","stringify","fromEntries","entries","map","_ref","_ref2","_slicedToArray","value","Array","isArray","String","deepEqual","a","b","i","keysA","keys","keysB","walkConfigItems","focusedRoute","configs","_ref3","pattern","focusedParams","collectedParams","_route$state$index","inputPattern","assign","getParamsWithConventionsCollapsed","routeName","_configItem$screens$c","initialRouteName","initialRouteConfig","nextRoute","nestedScreens","join","_ref4","current","allParams","_current$index","_configs$nextRoute$na","_nextRoute$state$rout","_nextRoute$state$rout2","_nextRoute$state$inde","_nextRoute$state","_walkConfigItems","_objectSpread","getPathWithConventionsCollapsed","routePath","param","query","sort","basicSanitizePath","_ref5","segments","split","p","getParamName","startsWith","slice","v","_ref6","processedParams","filter","forEach","some","_matchDeepDynamicRout","simplifiedPath","initial","joinPaths","_ref7","_len","paths","_key","concat","apply","_toConsumableArray","Boolean","createConfigItem","config","parentPattern","exact","_ref8","_ref9","c"],"sources":["C:/Riaz/Projects/JK/JK_Frontend/node_modules/expo-router/src/fork/getPathFromState.ts"],"sourcesContent":["import {\n  PathConfig,\n  PathConfigMap,\n  validatePathConfig,\n} from \"@react-navigation/core\";\nimport type {\n  NavigationState,\n  PartialState,\n  Route,\n} from \"@react-navigation/routers\";\nimport * as queryString from \"query-string\";\n\nimport {\n  matchDeepDynamicRouteName,\n  matchDynamicName,\n  matchGroupName,\n} from \"../matchers\";\n\ntype Options<ParamList extends object> = {\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n\nexport type State =\n  | NavigationState\n  | Omit<PartialState<NavigationState>, \"stale\">;\n\ntype StringifyConfig = Record<string, (value: any) => string>;\n\ntype ConfigItem = {\n  pattern?: string;\n  stringify?: StringifyConfig;\n  screens?: Record<string, ConfigItem>;\n  // Used as fallback for groups\n  initialRouteName?: string;\n};\n\ntype CustomRoute = Route<string> & {\n  state?: State;\n};\n\nconst DEFAULT_SCREENS: PathConfigMap<object> = {};\n\nconst getActiveRoute = (state: State): { name: string; params?: object } => {\n  const route =\n    typeof state.index === \"number\"\n      ? state.routes[state.index]\n      : state.routes[state.routes.length - 1];\n\n  if (route.state) {\n    return getActiveRoute(route.state);\n  }\n\n  if (route && isInvalidParams(route.params)) {\n    return getActiveRoute(createFakeState(route.params));\n  }\n\n  return route;\n};\n\nfunction createFakeState(params: StateAsParams) {\n  return {\n    stale: false,\n    type: \"UNKNOWN\",\n    key: \"UNKNOWN\",\n    index: 0,\n    routeNames: [],\n    routes: [\n      {\n        key: \"UNKNOWN\",\n        name: params.screen,\n        params: params.params,\n        path: params.path,\n      },\n    ],\n  };\n}\n\nfunction segmentMatchesConvention(segment: string): boolean {\n  return (\n    segment === \"index\" ||\n    matchDynamicName(segment) != null ||\n    matchGroupName(segment) != null ||\n    matchDeepDynamicRouteName(segment) != null\n  );\n}\n\nfunction encodeURIComponentPreservingBrackets(str: string) {\n  return encodeURIComponent(str).replace(/%5B/g, \"[\").replace(/%5D/g, \"]\");\n}\n\n/**\n * Utility to serialize a navigation state object to a path string.\n *\n * @example\n * ```js\n * getPathFromState(\n *   {\n *     routes: [\n *       {\n *         name: 'Chat',\n *         params: { author: 'Jane', id: 42 },\n *       },\n *     ],\n *   },\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         stringify: { author: author => author.toLowerCase() }\n *       }\n *     }\n *   }\n * )\n * ```\n *\n * @param state Navigation state to serialize.\n * @param options Extra options to fine-tune how to serialize the path.\n * @returns Path representing the state, e.g. /foo/bar?count=42.\n */\nexport default function getPathFromState<ParamList extends object>(\n  state: State,\n  _options?: Options<ParamList> & {\n    preserveGroups?: boolean;\n    preserveDynamicRoutes?: boolean;\n  }\n): string {\n  return getPathDataFromState(state, _options).path;\n}\n\nexport function getPathDataFromState<ParamList extends object>(\n  state: State,\n  _options: Options<ParamList> & {\n    preserveGroups?: boolean;\n    preserveDynamicRoutes?: boolean;\n  } = { screens: DEFAULT_SCREENS }\n) {\n  if (state == null) {\n    throw Error(\n      \"Got 'undefined' for the navigation state. You must pass a valid state object.\"\n    );\n  }\n\n  const { preserveGroups, preserveDynamicRoutes, ...options } = _options;\n\n  validatePathConfig(options);\n\n  // Expo Router disallows usage without a linking config.\n  if (Object.is(options.screens, DEFAULT_SCREENS)) {\n    throw Error(\n      \"You must pass a 'screens' object to 'getPathFromState' to generate a path.\"\n    );\n  }\n\n  return getPathFromResolvedState(\n    state,\n    // Create a normalized configs object which will be easier to use\n    createNormalizedConfigs(options.screens),\n    { preserveGroups, preserveDynamicRoutes }\n  );\n}\n\nfunction processParamsWithUserSettings(\n  configItem: ConfigItem,\n  params: Record<string, any>\n) {\n  const stringify = configItem?.stringify;\n\n  return Object.fromEntries(\n    Object.entries(params).map(([key, value]) => [\n      key,\n      // TODO: Strip nullish values here.\n      stringify?.[key]\n        ? stringify[key](value)\n        : // Preserve rest params\n        Array.isArray(value)\n        ? value\n        : String(value),\n    ])\n  );\n}\n\nexport function deepEqual(a: any, b: any) {\n  if (a === b) {\n    return true;\n  }\n\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    for (let i = 0; i < a.length; i++) {\n      if (!deepEqual(a[i], b[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (typeof a === \"object\" && typeof b === \"object\") {\n    const keysA = Object.keys(a);\n    const keysB = Object.keys(b);\n\n    if (keysA.length !== keysB.length) {\n      return false;\n    }\n\n    for (const key of keysA) {\n      if (!deepEqual(a[key], b[key])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction walkConfigItems(\n  route: CustomRoute,\n  focusedRoute: {\n    name: string;\n    params?: object;\n  },\n  configs: Record<string, ConfigItem>,\n  {\n    preserveDynamicRoutes,\n  }: {\n    preserveDynamicRoutes?: boolean;\n  }\n) {\n  // NOTE(EvanBacon): Fill in current route using state that was passed as params.\n  if (!route.state && isInvalidParams(route.params)) {\n    route.state = createFakeState(route.params);\n  }\n\n  let pattern: string | null = null;\n  let focusedParams: Record<string, any> | undefined;\n\n  const collectedParams: Record<string, any> = {};\n\n  while (route.name in configs) {\n    const configItem = configs[route.name];\n    const inputPattern = configItem.pattern;\n\n    if (inputPattern == null) {\n      // This should never happen in Expo Router.\n      throw new Error(\"Unexpected: No pattern found for route \" + route.name);\n    }\n    pattern = inputPattern;\n\n    if (route.params) {\n      const params = processParamsWithUserSettings(configItem, route.params);\n      // TODO: Does this need to be a null check?\n      if (pattern) {\n        Object.assign(collectedParams, params);\n      }\n      if (deepEqual(focusedRoute, route)) {\n        if (preserveDynamicRoutes) {\n          focusedParams = params;\n        } else {\n          // If this is the focused route, keep the params for later use\n          // We save it here since it's been stringified already\n          focusedParams = getParamsWithConventionsCollapsed({\n            params,\n            pattern,\n            routeName: route.name,\n          });\n        }\n      }\n    }\n\n    if (!route.state && isInvalidParams(route.params)) {\n      route.state = createFakeState(route.params);\n    }\n\n    // If there is no `screens` property or no nested state, we return pattern\n    if (!configItem.screens || route.state === undefined) {\n      if (\n        configItem.initialRouteName &&\n        configItem.screens &&\n        configItem.initialRouteName in configItem.screens &&\n        configItem.screens[configItem.initialRouteName]?.pattern\n      ) {\n        const initialRouteConfig =\n          configItem.screens[configItem.initialRouteName];\n\n        // NOTE(EvanBacon): Big hack to support initial route changes in tab bars.\n        pattern = initialRouteConfig.pattern!;\n        if (focusedParams) {\n          if (!preserveDynamicRoutes) {\n            // If this is the focused route, keep the params for later use\n            // We save it here since it's been stringified already\n            focusedParams = getParamsWithConventionsCollapsed({\n              params: focusedParams,\n              pattern,\n              routeName: route.name,\n            });\n          }\n        }\n      }\n      break;\n    }\n\n    const index = route.state.index ?? route.state.routes.length - 1;\n\n    const nextRoute = route.state.routes[index];\n    const nestedScreens = configItem.screens;\n\n    // if there is config for next route name, we go deeper\n    if (nestedScreens && nextRoute.name in nestedScreens) {\n      route = nextRoute as CustomRoute;\n      configs = nestedScreens;\n    } else {\n      // If not, there is no sense in going deeper in config\n      break;\n    }\n  }\n\n  if (pattern == null) {\n    throw new Error(\n      `No pattern found for route \"${route.name}\". Options are: ${Object.keys(\n        configs\n      ).join(\", \")}.`\n    );\n  }\n\n  if (pattern && !focusedParams && focusedRoute.params) {\n    if (preserveDynamicRoutes) {\n      focusedParams = focusedRoute.params;\n    } else {\n      // If this is the focused route, keep the params for later use\n      // We save it here since it's been stringified already\n      focusedParams = getParamsWithConventionsCollapsed({\n        params: focusedRoute.params,\n        pattern,\n        routeName: route.name,\n      });\n    }\n    Object.assign(focusedParams, collectedParams);\n  }\n\n  return {\n    pattern,\n    nextRoute: route,\n    focusedParams,\n    params: collectedParams,\n  };\n}\n\nfunction getPathFromResolvedState(\n  state: State,\n  configs: Record<string, ConfigItem>,\n  {\n    preserveGroups,\n    preserveDynamicRoutes,\n  }: { preserveGroups?: boolean; preserveDynamicRoutes?: boolean }\n) {\n  let path = \"\";\n  let current: State = state;\n\n  const allParams: Record<string, any> = {};\n\n  while (current) {\n    path += \"/\";\n\n    const route = current.routes[current.index ?? 0] as CustomRoute;\n    // NOTE(EvanBacon): Fill in current route using state that was passed as params.\n    // if (isInvalidParams(route.params)) {\n    if (!route.state && isInvalidParams(route.params)) {\n      route.state = createFakeState(route.params);\n    }\n\n    const { pattern, params, nextRoute, focusedParams } = walkConfigItems(\n      route,\n      getActiveRoute(current),\n      { ...configs },\n      { preserveDynamicRoutes }\n    );\n\n    Object.assign(allParams, params);\n\n    path += getPathWithConventionsCollapsed({\n      pattern,\n      routePath: nextRoute.path,\n      params: allParams,\n      initialRouteName: configs[nextRoute.name]?.initialRouteName,\n      preserveGroups,\n      preserveDynamicRoutes,\n    });\n\n    if (\n      nextRoute.state &&\n      // NOTE(EvanBacon): The upstream implementation allows for sending in synthetic states (states that weren't generated by `getStateFromPath`)\n      // and any invalid routes will simply be ignored.\n      // Because of this, we need to check if the next route is valid before continuing, otherwise our more strict\n      // implementation will throw an error.\n      configs[nextRoute.state.routes?.[nextRoute.state?.index ?? 0]?.name]\n    ) {\n      // Continue looping with the next state if available.\n      current = nextRoute.state;\n    } else {\n      // Finished crawling state.\n\n      // Check for query params before exiting.\n      if (focusedParams) {\n        for (const param in focusedParams) {\n          // TODO: This is not good. We shouldn't squat strings named \"undefined\".\n          if (focusedParams[param] === \"undefined\") {\n            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n            delete focusedParams[param];\n          }\n        }\n\n        const query = queryString.stringify(focusedParams, { sort: false });\n        if (query) {\n          path += `?${query}`;\n        }\n      }\n      break;\n    }\n  }\n\n  return { path: basicSanitizePath(path), params: allParams };\n}\n\nfunction getPathWithConventionsCollapsed({\n  pattern,\n  routePath,\n  params,\n  preserveGroups,\n  preserveDynamicRoutes,\n  initialRouteName,\n}: {\n  pattern: string;\n  routePath?: string;\n  params: Record<string, any>;\n  preserveGroups?: boolean;\n  preserveDynamicRoutes?: boolean;\n  initialRouteName?: string;\n}) {\n  const segments = pattern.split(\"/\");\n  return segments\n    .map((p, i) => {\n      const name = getParamName(p);\n\n      // We don't know what to show for wildcard patterns\n      // Showing the route name seems ok, though whatever we show here will be incorrect\n      // Since the page doesn't actually exist\n      if (p.startsWith(\"*\")) {\n        if (preserveDynamicRoutes) {\n          return `[...${name}]`;\n        }\n        if (params[name]) {\n          return params[name].join(\"/\");\n        }\n        if (i === 0) {\n          // This can occur when a wildcard matches all routes and the given path was `/`.\n          return routePath;\n        }\n        // remove existing segments from route.path and return it\n        // this is used for nested wildcard routes. Without this, the path would add\n        // all nested segments to the beginning of the wildcard route.\n        return routePath\n          ?.split(\"/\")\n          .slice(i + 1)\n          .join(\"/\");\n      }\n\n      // If the path has a pattern for a param, put the param in the path\n      if (p.startsWith(\":\")) {\n        if (preserveDynamicRoutes) {\n          return `[${name}]`;\n        }\n        // Optional params without value assigned in route.params should be ignored\n        return params[name];\n      }\n\n      if (!preserveGroups && matchGroupName(p) != null) {\n        // When the last part is a group it could be a shared URL\n        // if the route has an initialRouteName defined, then we should\n        // use that as the component path as we can assume it will be shown.\n        if (segments.length - 1 === i) {\n          if (initialRouteName) {\n            // Return an empty string if the init route is ambiguous.\n            if (segmentMatchesConvention(initialRouteName)) {\n              return \"\";\n            }\n            return encodeURIComponentPreservingBrackets(initialRouteName);\n          }\n        }\n        return \"\";\n      }\n      // Preserve dynamic syntax for rehydration\n      return encodeURIComponentPreservingBrackets(p);\n    })\n    .map((v) => v ?? \"\")\n    .join(\"/\");\n}\n\n/** Given a set of query params and a pattern with possible conventions, collapse the conventions and return the remaining params. */\nfunction getParamsWithConventionsCollapsed({\n  pattern,\n  routeName,\n  params,\n}: {\n  pattern: string;\n  /** Route name is required for matching the wildcard route. This is specific to Expo Router. */\n  routeName: string;\n  params: object;\n}): Record<string, string> {\n  const processedParams: Record<string, string> = { ...params };\n\n  // Remove the params present in the pattern since we'll only use the rest for query string\n\n  const segments = pattern.split(\"/\");\n\n  // Dynamic Routes\n  segments\n    .filter((segment) => segment.startsWith(\":\"))\n    .forEach((segment) => {\n      const name = getParamName(segment);\n      delete processedParams[name];\n    });\n\n  // Deep Dynamic Routes\n  if (segments.some((segment) => segment.startsWith(\"*\"))) {\n    // NOTE(EvanBacon): Drop the param name matching the wildcard route name -- this is specific to Expo Router.\n    const name = matchDeepDynamicRouteName(routeName) ?? routeName;\n    delete processedParams[name];\n  }\n\n  return processedParams;\n}\n\n// Remove multiple as well as trailing slashes\nfunction basicSanitizePath(path: string) {\n  // Remove duplicate slashes like `foo//bar` -> `foo/bar`\n  const simplifiedPath = path.replace(/\\/+/g, \"/\");\n  if (simplifiedPath.length <= 1) {\n    return simplifiedPath;\n  }\n  // Remove trailing slash like `foo/bar/` -> `foo/bar`\n  return simplifiedPath.replace(/\\/$/, \"\");\n}\n\ntype StateAsParams = {\n  initial: boolean;\n  path?: string;\n  screen: string;\n  params: Record<string, any>;\n};\n\n// TODO: Make StackRouter not do this...\n// Detect if the params came from StackRouter using `params` to pass around internal state.\nfunction isInvalidParams(\n  params?: Record<string, any>\n): params is StateAsParams {\n  if (!params) {\n    return false;\n  }\n\n  if (\n    \"params\" in params &&\n    typeof params.params === \"object\" &&\n    !!params.params\n  ) {\n    return true;\n  }\n\n  return (\n    \"initial\" in params &&\n    typeof params.initial === \"boolean\" &&\n    // \"path\" in params &&\n    \"screen\" in params\n  );\n}\n\nconst getParamName = (pattern: string) =>\n  pattern.replace(/^[:*]/, \"\").replace(/\\?$/, \"\");\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split(\"/\")))\n    .filter(Boolean)\n    .join(\"/\");\n\nconst createConfigItem = (\n  config: PathConfig<object> | string,\n  parentPattern?: string\n): ConfigItem => {\n  if (typeof config === \"string\") {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    return { pattern };\n  }\n\n  if (config.exact && config.path === undefined) {\n    throw new Error(\n      \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n    );\n  }\n\n  // If an object is specified as the value (e.g. Foo: { ... }),\n  // It can have `path` property and `screens` prop which has nested configs\n  const pattern =\n    config.exact !== true\n      ? joinPaths(parentPattern || \"\", config.path || \"\")\n      : config.path || \"\";\n\n  const screens = config.screens\n    ? createNormalizedConfigs(config.screens, pattern)\n    : undefined;\n\n  return {\n    // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n    pattern: pattern?.split(\"/\").filter(Boolean).join(\"/\"),\n    stringify: config.stringify,\n    screens,\n    initialRouteName: config.initialRouteName,\n  };\n};\n\nconst createNormalizedConfigs = (\n  options: PathConfigMap<object>,\n  pattern?: string\n): Record<string, ConfigItem> =>\n  Object.fromEntries(\n    Object.entries(options).map(([name, c]) => [\n      name,\n      createConfigItem(c, pattern),\n    ])\n  );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}