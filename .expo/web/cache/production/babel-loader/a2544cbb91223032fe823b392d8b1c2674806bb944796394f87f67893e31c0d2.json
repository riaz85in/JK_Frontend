{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _assertThisInitialized from\"@babel/runtime/helpers/assertThisInitialized\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _defineProperty2 from\"@babel/runtime/helpers/defineProperty\";var _stateToPropMappings;function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty2(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}var _UIManagerAny$getView,_UIManagerAny$getView2,_UIManagerAny$getCons;function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';import Platform from\"react-native-web/dist/exports/Platform\";import UIManager from\"react-native-web/dist/exports/UIManager\";import DeviceEventEmitter from\"react-native-web/dist/exports/DeviceEventEmitter\";import deepEqual from'lodash/isEqual';import RNGestureHandlerModule from\"../RNGestureHandlerModule\";import{State}from\"../State\";import{handlerIDToTag,getNextHandlerTag,registerOldGestureHandler}from\"./handlersRegistry\";import{filterConfig,findNodeHandle,scheduleFlushOperations}from\"./gestureHandlerCommon\";import{isFabric,isJestEnv,tagMessage}from\"../utils\";import{ActionType}from\"../ActionType\";import{PressabilityDebugView}from\"./PressabilityDebugView\";var UIManagerAny=UIManager;var customGHEventsConfigFabricAndroid={topOnGestureHandlerEvent:{registrationName:'onGestureHandlerEvent'},topOnGestureHandlerStateChange:{registrationName:'onGestureHandlerStateChange'}};var customGHEventsConfig=_objectSpread({onGestureHandlerEvent:{registrationName:'onGestureHandlerEvent'},onGestureHandlerStateChange:{registrationName:'onGestureHandlerStateChange'}},isFabric()&&Platform.OS==='android'&&customGHEventsConfigFabricAndroid);UIManagerAny.genericDirectEventTypes=_objectSpread(_objectSpread({},UIManagerAny.genericDirectEventTypes),customGHEventsConfig);var UIManagerConstants=(_UIManagerAny$getView=(_UIManagerAny$getView2=UIManagerAny.getViewManagerConfig)===null||_UIManagerAny$getView2===void 0?void 0:_UIManagerAny$getView2.call(UIManagerAny,'getConstants'))!==null&&_UIManagerAny$getView!==void 0?_UIManagerAny$getView:(_UIManagerAny$getCons=UIManagerAny.getConstants)===null||_UIManagerAny$getCons===void 0?void 0:_UIManagerAny$getCons.call(UIManagerAny);if(UIManagerConstants){UIManagerConstants.genericDirectEventTypes=_objectSpread(_objectSpread({},UIManagerConstants.genericDirectEventTypes),customGHEventsConfig);}var _UIManagerAny$setJSRe=UIManagerAny.setJSResponder,oldSetJSResponder=_UIManagerAny$setJSRe===void 0?function(){}:_UIManagerAny$setJSRe,_UIManagerAny$clearJS=UIManagerAny.clearJSResponder,oldClearJSResponder=_UIManagerAny$clearJS===void 0?function(){}:_UIManagerAny$clearJS;UIManagerAny.setJSResponder=function(tag,blockNativeResponder){RNGestureHandlerModule.handleSetJSResponder(tag,blockNativeResponder);oldSetJSResponder(tag,blockNativeResponder);};UIManagerAny.clearJSResponder=function(){RNGestureHandlerModule.handleClearJSResponder();oldClearJSResponder();};var allowTouches=true;var DEV_ON_ANDROID=__DEV__&&Platform.OS==='android';if(DEV_ON_ANDROID){DeviceEventEmitter.addListener('toggleElementInspector',function(){allowTouches=!allowTouches;});}function hasUnresolvedRefs(props){var extract=function extract(refs){if(!Array.isArray(refs)){return refs&&refs.current===null;}return refs.some(function(r){return r&&r.current===null;});};return extract(props['simultaneousHandlers'])||extract(props['waitFor']);}var stateToPropMappings=(_stateToPropMappings={},_defineProperty2(_stateToPropMappings,State.UNDETERMINED,undefined),_defineProperty2(_stateToPropMappings,State.BEGAN,'onBegan'),_defineProperty2(_stateToPropMappings,State.FAILED,'onFailed'),_defineProperty2(_stateToPropMappings,State.CANCELLED,'onCancelled'),_defineProperty2(_stateToPropMappings,State.ACTIVE,'onActivated'),_defineProperty2(_stateToPropMappings,State.END,'onEnded'),_stateToPropMappings);var UNRESOLVED_REFS_RETRY_LIMIT=1;export default function createHandler(_ref){var name=_ref.name,_ref$allowedProps=_ref.allowedProps,allowedProps=_ref$allowedProps===void 0?[]:_ref$allowedProps,_ref$config=_ref.config,config=_ref$config===void 0?{}:_ref$config,transformProps=_ref.transformProps,_ref$customNativeProp=_ref.customNativeProps,customNativeProps=_ref$customNativeProp===void 0?[]:_ref$customNativeProp;var Handler=function(_React$Component){_inherits(Handler,_React$Component);var _super=_createSuper(Handler);function Handler(props){var _this;_classCallCheck(this,Handler);_this=_super.call(this,props);_defineProperty(_assertThisInitialized(_this),\"handlerTag\",void 0);_defineProperty(_assertThisInitialized(_this),\"config\",void 0);_defineProperty(_assertThisInitialized(_this),\"propsRef\",void 0);_defineProperty(_assertThisInitialized(_this),\"viewNode\",void 0);_defineProperty(_assertThisInitialized(_this),\"viewTag\",void 0);_defineProperty(_assertThisInitialized(_this),\"updateEnqueued\",null);_defineProperty(_assertThisInitialized(_this),\"inspectorToggleListener\",void 0);_defineProperty(_assertThisInitialized(_this),\"onGestureHandlerEvent\",function(event){if(event.nativeEvent.handlerTag===_this.handlerTag){if(typeof _this.props.onGestureEvent==='function'){var _this$props$onGesture,_this$props;(_this$props$onGesture=(_this$props=_this.props).onGestureEvent)===null||_this$props$onGesture===void 0?void 0:_this$props$onGesture.call(_this$props,event);}}else{var _this$props$onGesture2,_this$props2;(_this$props$onGesture2=(_this$props2=_this.props).onGestureHandlerEvent)===null||_this$props$onGesture2===void 0?void 0:_this$props$onGesture2.call(_this$props2,event);}});_defineProperty(_assertThisInitialized(_this),\"onGestureHandlerStateChange\",function(event){if(event.nativeEvent.handlerTag===_this.handlerTag){if(typeof _this.props.onHandlerStateChange==='function'){var _this$props$onHandler,_this$props3;(_this$props$onHandler=(_this$props3=_this.props).onHandlerStateChange)===null||_this$props$onHandler===void 0?void 0:_this$props$onHandler.call(_this$props3,event);}var state=event.nativeEvent.state;var stateEventName=stateToPropMappings[state];var eventHandler=stateEventName&&_this.props[stateEventName];if(eventHandler&&typeof eventHandler==='function'){eventHandler(event);}}else{var _this$props$onGesture3,_this$props4;(_this$props$onGesture3=(_this$props4=_this.props).onGestureHandlerStateChange)===null||_this$props$onGesture3===void 0?void 0:_this$props$onGesture3.call(_this$props4,event);}});_defineProperty(_assertThisInitialized(_this),\"refHandler\",function(node){_this.viewNode=node;var child=React.Children.only(_this.props.children);var ref=child.ref;if(ref!==null){if(typeof ref==='function'){ref(node);}else{ref.current=node;}}});_defineProperty(_assertThisInitialized(_this),\"createGestureHandler\",function(newConfig){_this.config=newConfig;RNGestureHandlerModule.createGestureHandler(name,_this.handlerTag,newConfig);});_defineProperty(_assertThisInitialized(_this),\"attachGestureHandler\",function(newViewTag){_this.viewTag=newViewTag;if(Platform.OS==='web'){RNGestureHandlerModule.attachGestureHandler(_this.handlerTag,newViewTag,ActionType.JS_FUNCTION_OLD_API,_this.propsRef);}else{registerOldGestureHandler(_this.handlerTag,{onGestureEvent:_this.onGestureHandlerEvent,onGestureStateChange:_this.onGestureHandlerStateChange});var actionType=function(){var _this$props5,_this$props6;if((_this$props5=_this.props)!==null&&_this$props5!==void 0&&_this$props5.onGestureEvent&&'current'in _this.props.onGestureEvent){return ActionType.REANIMATED_WORKLET;}else if((_this$props6=_this.props)!==null&&_this$props6!==void 0&&_this$props6.onGestureEvent&&'__isNative'in _this.props.onGestureEvent){return ActionType.NATIVE_ANIMATED_EVENT;}else{return ActionType.JS_FUNCTION_OLD_API;}}();RNGestureHandlerModule.attachGestureHandler(_this.handlerTag,newViewTag,actionType);}scheduleFlushOperations();});_defineProperty(_assertThisInitialized(_this),\"updateGestureHandler\",function(newConfig){_this.config=newConfig;RNGestureHandlerModule.updateGestureHandler(_this.handlerTag,newConfig);scheduleFlushOperations();});_this.handlerTag=getNextHandlerTag();_this.config={};_this.propsRef=React.createRef();_this.state={allowTouches:allowTouches};if(props.id){if(handlerIDToTag[props.id]!==undefined){throw new Error(\"Handler with ID \\\"\"+props.id+\"\\\" already registered\");}handlerIDToTag[props.id]=_this.handlerTag;}return _this;}_createClass(Handler,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;var props=this.props;if(DEV_ON_ANDROID){this.inspectorToggleListener=DeviceEventEmitter.addListener('toggleElementInspector',function(){_this2.setState(function(_){return{allowTouches:allowTouches};});_this2.update(UNRESOLVED_REFS_RETRY_LIMIT);});}if(hasUnresolvedRefs(props)){this.updateEnqueued=setImmediate(function(){_this2.updateEnqueued=null;_this2.update(UNRESOLVED_REFS_RETRY_LIMIT);});}this.createGestureHandler(filterConfig(transformProps?transformProps(this.props):this.props,[].concat(_toConsumableArray(allowedProps),_toConsumableArray(customNativeProps)),config));this.attachGestureHandler(findNodeHandle(this.viewNode));}},{key:\"componentDidUpdate\",value:function componentDidUpdate(){var viewTag=findNodeHandle(this.viewNode);if(this.viewTag!==viewTag){this.attachGestureHandler(viewTag);}this.update(UNRESOLVED_REFS_RETRY_LIMIT);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){var _this$inspectorToggle;(_this$inspectorToggle=this.inspectorToggleListener)===null||_this$inspectorToggle===void 0?void 0:_this$inspectorToggle.remove();RNGestureHandlerModule.dropGestureHandler(this.handlerTag);scheduleFlushOperations();if(this.updateEnqueued){clearImmediate(this.updateEnqueued);}var handlerID=this.props.id;if(handlerID){delete handlerIDToTag[handlerID];}}},{key:\"update\",value:function update(remainingTries){var _this3=this;var props=this.props;if(hasUnresolvedRefs(props)&&remainingTries>0){this.updateEnqueued=setImmediate(function(){_this3.updateEnqueued=null;_this3.update(remainingTries-1);});}else{var newConfig=filterConfig(transformProps?transformProps(this.props):this.props,[].concat(_toConsumableArray(allowedProps),_toConsumableArray(customNativeProps)),config);if(!deepEqual(this.config,newConfig)){this.updateGestureHandler(newConfig);}}}},{key:\"setNativeProps\",value:function setNativeProps(updates){var mergedProps=_objectSpread(_objectSpread({},this.props),updates);var newConfig=filterConfig(transformProps?transformProps(mergedProps):mergedProps,[].concat(_toConsumableArray(allowedProps),_toConsumableArray(customNativeProps)),config);this.updateGestureHandler(newConfig);}},{key:\"render\",value:function render(){var _this$props$testID;var gestureEventHandler=this.onGestureHandlerEvent;var _this$props7=this.props,onGestureEvent=_this$props7.onGestureEvent,onGestureHandlerEvent=_this$props7.onGestureHandlerEvent;if(onGestureEvent&&typeof onGestureEvent!=='function'){if(onGestureHandlerEvent){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}gestureEventHandler=onGestureEvent;}else{if(onGestureHandlerEvent&&typeof onGestureHandlerEvent!=='function'){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}}var gestureStateEventHandler=this.onGestureHandlerStateChange;var _this$props8=this.props,onHandlerStateChange=_this$props8.onHandlerStateChange,onGestureHandlerStateChange=_this$props8.onGestureHandlerStateChange;if(onHandlerStateChange&&typeof onHandlerStateChange!=='function'){if(onGestureHandlerStateChange){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}gestureStateEventHandler=onHandlerStateChange;}else{if(onGestureHandlerStateChange&&typeof onGestureHandlerStateChange!=='function'){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}}var events={onGestureHandlerEvent:this.state.allowTouches?gestureEventHandler:undefined,onGestureHandlerStateChange:this.state.allowTouches?gestureStateEventHandler:undefined};this.propsRef.current=events;var child=null;try{child=React.Children.only(this.props.children);}catch(e){throw new Error(tagMessage(name+\" got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.\"));}var grandChildren=child.props.children;if(__DEV__&&child.type&&(child.type==='RNGestureHandlerButton'||child.type.name==='View'||child.type.displayName==='View')){grandChildren=React.Children.toArray(grandChildren);grandChildren.push(React.createElement(PressabilityDebugView,{key:\"pressabilityDebugView\",color:\"mediumspringgreen\",hitSlop:child.props.hitSlop}));}return React.cloneElement(child,_objectSpread(_objectSpread({ref:this.refHandler,collapsable:false},isJestEnv()?{handlerType:name,handlerTag:this.handlerTag}:{}),{},{testID:(_this$props$testID=this.props.testID)!==null&&_this$props$testID!==void 0?_this$props$testID:child.props.testID},events),grandChildren);}}]);return Handler;}(React.Component);_defineProperty(Handler,\"displayName\",name);return Handler;}","map":{"version":3,"names":["React","Platform","UIManager","DeviceEventEmitter","deepEqual","RNGestureHandlerModule","State","handlerIDToTag","getNextHandlerTag","registerOldGestureHandler","filterConfig","findNodeHandle","scheduleFlushOperations","isFabric","isJestEnv","tagMessage","ActionType","PressabilityDebugView","UIManagerAny","customGHEventsConfigFabricAndroid","topOnGestureHandlerEvent","registrationName","topOnGestureHandlerStateChange","customGHEventsConfig","_objectSpread","onGestureHandlerEvent","onGestureHandlerStateChange","OS","genericDirectEventTypes","UIManagerConstants","_UIManagerAny$getView","_UIManagerAny$getView2","getViewManagerConfig","call","_UIManagerAny$getCons","getConstants","_UIManagerAny$setJSRe","setJSResponder","oldSetJSResponder","_UIManagerAny$clearJS","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","handleSetJSResponder","handleClearJSResponder","allowTouches","DEV_ON_ANDROID","__DEV__","addListener","hasUnresolvedRefs","props","extract","refs","Array","isArray","current","some","r","stateToPropMappings","_stateToPropMappings","_defineProperty2","UNDETERMINED","undefined","BEGAN","FAILED","CANCELLED","ACTIVE","END","UNRESOLVED_REFS_RETRY_LIMIT","createHandler","_ref","name","_ref$allowedProps","allowedProps","_ref$config","config","transformProps","_ref$customNativeProp","customNativeProps","Handler","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","_defineProperty","_assertThisInitialized","event","nativeEvent","handlerTag","onGestureEvent","_this$props$onGesture","_this$props","_this$props$onGesture2","_this$props2","onHandlerStateChange","_this$props$onHandler","_this$props3","state","stateEventName","eventHandler","_this$props$onGesture3","_this$props4","node","viewNode","child","Children","only","children","ref","newConfig","createGestureHandler","newViewTag","viewTag","attachGestureHandler","JS_FUNCTION_OLD_API","propsRef","onGestureStateChange","actionType","_this$props5","_this$props6","REANIMATED_WORKLET","NATIVE_ANIMATED_EVENT","updateGestureHandler","createRef","id","Error","_createClass","key","value","componentDidMount","_this2","inspectorToggleListener","setState","_","update","updateEnqueued","setImmediate","concat","_toConsumableArray","componentDidUpdate","componentWillUnmount","_this$inspectorToggle","remove","dropGestureHandler","clearImmediate","handlerID","remainingTries","_this3","setNativeProps","updates","mergedProps","render","_this$props$testID","gestureEventHandler","_this$props7","gestureStateEventHandler","_this$props8","events","e","grandChildren","type","displayName","toArray","push","createElement","color","hitSlop","cloneElement","refHandler","collapsable","handlerType","testID","Component"],"sources":["C:\\Riaz\\Projects\\JK\\JK_Frontend\\node_modules\\react-native-gesture-handler\\lib\\module\\handlers\\createHandler.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  UIManager,\n  DeviceEventEmitter,\n  EmitterSubscription,\n} from 'react-native';\n// @ts-ignore - it isn't typed by TS & don't have definitelyTyped types\nimport deepEqual from 'lodash/isEqual';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport type RNGestureHandlerModuleWeb from '../RNGestureHandlerModule.web';\nimport { State } from '../State';\nimport {\n  handlerIDToTag,\n  getNextHandlerTag,\n  registerOldGestureHandler,\n} from './handlersRegistry';\n\nimport {\n  BaseGestureHandlerProps,\n  filterConfig,\n  GestureEvent,\n  HandlerStateChangeEvent,\n  findNodeHandle,\n  scheduleFlushOperations,\n} from './gestureHandlerCommon';\nimport { ValueOf } from '../typeUtils';\nimport { isFabric, isJestEnv, tagMessage } from '../utils';\nimport { ActionType } from '../ActionType';\nimport { PressabilityDebugView } from './PressabilityDebugView';\n\nconst UIManagerAny = UIManager as any;\n\nconst customGHEventsConfigFabricAndroid = {\n  topOnGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  topOnGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n\n  // When using React Native Gesture Handler for Animated.event with useNativeDriver: true\n  // on Android with Fabric enabled, the native part still sends the native events to JS\n  // but prefixed with \"top\". We cannot simply rename the events above so they are prefixed\n  // with \"top\" instead of \"on\" because in such case Animated.events would not be registered.\n  // That's why we need to register another pair of event names.\n  // The incoming events will be queued but never handled.\n  // Without this piece of code below, you'll get the following JS error:\n  // Unsupported top level event type \"topOnGestureHandlerEvent\" dispatched\n  ...(isFabric() &&\n    Platform.OS === 'android' &&\n    customGHEventsConfigFabricAndroid),\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManagerAny.genericDirectEventTypes = {\n  ...UIManagerAny.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants =\n  UIManagerAny.getViewManagerConfig?.('getConstants') ??\n  UIManagerAny.getConstants?.();\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    //no operation\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    //no operation\n  },\n} = UIManagerAny;\nUIManagerAny.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet allowTouches = true;\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\n// Toggled inspector blocks touch events in order to allow inspecting on Android\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\n    allowTouches = !allowTouches;\n  });\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<HandlerPropsT extends Record<string, unknown>> =\n  Readonly<{\n    name: string;\n    allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n    config: Readonly<Record<string, unknown>>;\n    transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n    customNativeProps?: Readonly<string[]>;\n  }>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\nconst UNRESOLVED_REFS_RETRY_LIMIT = 1;\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  interface HandlerState {\n    allowTouches: boolean;\n  }\n  class Handler extends React.Component<\n    T & InternalEventHandlers,\n    HandlerState\n  > {\n    static displayName = name;\n\n    private handlerTag: number;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private viewNode: any;\n    private viewTag?: number;\n    private updateEnqueued: ReturnType<typeof setImmediate> | null = null;\n    private inspectorToggleListener?: EmitterSubscription;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.handlerTag = getNextHandlerTag();\n      this.config = {};\n      this.propsRef = React.createRef();\n      this.state = { allowTouches };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n\n      if (DEV_ON_ANDROID) {\n        this.inspectorToggleListener = DeviceEventEmitter.addListener(\n          'toggleElementInspector',\n          () => {\n            this.setState((_) => ({ allowTouches }));\n            this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n          }\n        );\n      }\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // setImmediate. This makes it so update() function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        this.updateEnqueued = setImmediate(() => {\n          this.updateEnqueued = null;\n          this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n    }\n\n    componentWillUnmount() {\n      this.inspectorToggleListener?.remove();\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      scheduleFlushOperations();\n      if (this.updateEnqueued) {\n        clearImmediate(this.updateEnqueued);\n      }\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onGestureEvent === 'function') {\n          this.props.onGestureEvent?.(event);\n        }\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onHandlerStateChange === 'function') {\n          this.props.onHandlerStateChange?.(event);\n        }\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // TODO(TS) fix ref type\n      const { ref }: any = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (\n          RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler\n        )(\n          this.handlerTag,\n          newViewTag,\n          ActionType.JS_FUNCTION_OLD_API, // ignored on web\n          this.propsRef\n        );\n      } else {\n        registerOldGestureHandler(this.handlerTag, {\n          onGestureEvent: this.onGestureHandlerEvent,\n          onGestureStateChange: this.onGestureHandlerStateChange,\n        });\n\n        const actionType = (() => {\n          if (\n            this.props?.onGestureEvent &&\n            'current' in this.props.onGestureEvent\n          ) {\n            // Reanimated worklet\n            return ActionType.REANIMATED_WORKLET;\n          } else if (\n            this.props?.onGestureEvent &&\n            '__isNative' in this.props.onGestureEvent\n          ) {\n            // Animated.event with useNativeDriver: true\n            return ActionType.NATIVE_ANIMATED_EVENT;\n          } else {\n            // JS callback or Animated.event with useNativeDriver: false\n            return ActionType.JS_FUNCTION_OLD_API;\n          }\n        })();\n\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag,\n          actionType\n        );\n      }\n\n      scheduleFlushOperations();\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n      scheduleFlushOperations();\n    };\n\n    private update(remainingTries: number) {\n      const props: HandlerProps<U> = this.props;\n\n      // When ref is set via a function i.e. `ref={(r) => refObject.current = r}` instead of\n      // `ref={refObject}` it's possible that it won't be resolved in time. Seems like trying\n      // again is easy enough fix.\n      if (hasUnresolvedRefs(props) && remainingTries > 0) {\n        this.updateEnqueued = setImmediate(() => {\n          this.updateEnqueued = null;\n          this.update(remainingTries - 1);\n        });\n      } else {\n        const newConfig = filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        );\n        if (!deepEqual(this.config, newConfig)) {\n          this.updateGestureHandler(newConfig);\n        }\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const { onGestureEvent, onGestureHandlerEvent }: OnGestureEventHandlers =\n        this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: this.state.allowTouches\n          ? gestureEventHandler\n          : undefined,\n        onGestureHandlerStateChange: this.state.allowTouches\n          ? gestureStateEventHandler\n          : undefined,\n      };\n\n      this.propsRef.current = events;\n\n      let child: any = null;\n      try {\n        child = React.Children.only(this.props.children);\n      } catch (e) {\n        throw new Error(\n          tagMessage(\n            `${name} got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`\n          )\n        );\n      }\n\n      let grandChildren = child.props.children;\n      if (\n        __DEV__ &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          <PressabilityDebugView\n            key=\"pressabilityDebugView\"\n            color=\"mediumspringgreen\"\n            hitSlop={child.props.hitSlop}\n          />\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...(isJestEnv()\n            ? {\n                handlerType: name,\n                handlerTag: this.handlerTag,\n              }\n            : {}),\n          testID: this.props.testID ?? child.props.testID,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}