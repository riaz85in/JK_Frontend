{"ast":null,"code":"import{getActionFromState}from\"@react-navigation/native\";import{addEventListener,getInitialURL,getPathFromState,getStateFromPath}from\"./link/linking\";import{matchDeepDynamicRouteName,matchDynamicName}from\"./matchers\";function convertDynamicRouteToReactNavigation(segment){if(segment===\"index\"){return\"\";}var rest=matchDeepDynamicRouteName(segment);if(rest!=null){return\"*\"+rest;}var dynamicName=matchDynamicName(segment);if(dynamicName!=null){return\":\"+dynamicName;}return segment;}function parseRouteSegments(segments){return segments.split(\"/\").map(convertDynamicRouteToReactNavigation).filter(Boolean).join(\"/\");}function convertRouteNodeToScreen(node){var path=parseRouteSegments(node.route);if(!node.children.length){return path;}var screens=getReactNavigationScreensConfig(node.children);return{path:path,screens:screens,initialRouteName:node.initialRouteName};}export function getReactNavigationScreensConfig(nodes){return Object.fromEntries(nodes.map(function(node){return[node.route,convertRouteNodeToScreen(node)];}));}export function getNavigationConfig(routes){return{initialRouteName:routes.initialRouteName,screens:getReactNavigationScreensConfig(routes.children)};}export function getLinkingConfig(routes){return{prefixes:[],config:getNavigationConfig(routes),getInitialURL:getInitialURL,subscribe:addEventListener,getStateFromPath:getStateFromPathMemoized,getPathFromState:getPathFromState,getActionFromState:getActionFromState};}var stateCache=new Map();function getStateFromPathMemoized(path,options){var cached=stateCache.get(path);if(cached){return cached;}var result=getStateFromPath(path,options);stateCache.set(path,result);return result;}","map":{"version":3,"names":["getActionFromState","addEventListener","getInitialURL","getPathFromState","getStateFromPath","matchDeepDynamicRouteName","matchDynamicName","convertDynamicRouteToReactNavigation","segment","rest","dynamicName","parseRouteSegments","segments","split","map","filter","Boolean","join","convertRouteNodeToScreen","node","path","route","children","length","screens","getReactNavigationScreensConfig","initialRouteName","nodes","Object","fromEntries","getNavigationConfig","routes","getLinkingConfig","prefixes","config","subscribe","getStateFromPathMemoized","stateCache","Map","options","cached","get","result","set"],"sources":["C:/Riaz/Projects/JK/JK_Frontend/node_modules/expo-router/src/getLinkingConfig.ts"],"sourcesContent":["import { LinkingOptions, getActionFromState } from \"@react-navigation/native\";\n\nimport { RouteNode } from \"./Route\";\nimport {\n  addEventListener,\n  getInitialURL,\n  getPathFromState,\n  getStateFromPath,\n} from \"./link/linking\";\nimport { matchDeepDynamicRouteName, matchDynamicName } from \"./matchers\";\n\ntype Screen =\n  | string\n  | {\n      path: string;\n      screens: Record<string, Screen>;\n      initialRouteName?: string;\n    };\n\n// `[page]` -> `:page`\n// `page` -> `page`\nfunction convertDynamicRouteToReactNavigation(segment: string): string {\n  // NOTE(EvanBacon): To support shared routes we preserve group segments.\n  if (segment === \"index\") {\n    return \"\";\n  }\n\n  const rest = matchDeepDynamicRouteName(segment);\n  if (rest != null) {\n    return \"*\" + rest;\n  }\n  const dynamicName = matchDynamicName(segment);\n\n  if (dynamicName != null) {\n    return `:${dynamicName}`;\n  }\n\n  return segment;\n}\n\nfunction parseRouteSegments(segments: string): string {\n  return (\n    // NOTE(EvanBacon): When there are nested routes without layouts\n    // the node.route will be something like `app/home/index`\n    // this needs to be split to ensure each segment is parsed correctly.\n    segments\n      .split(\"/\")\n      // Convert each segment to a React Navigation format.\n      .map(convertDynamicRouteToReactNavigation)\n      // Remove any empty paths from groups or index routes.\n      .filter(Boolean)\n      // Join to return as a path.\n      .join(\"/\")\n  );\n}\n\nfunction convertRouteNodeToScreen(node: RouteNode): Screen {\n  const path = parseRouteSegments(node.route);\n  if (!node.children.length) {\n    return path;\n  }\n  const screens = getReactNavigationScreensConfig(node.children);\n  return {\n    path,\n    screens,\n    // NOTE(EvanBacon): This is bad because it forces all Layout Routes\n    // to be loaded into memory. We should move towards a system where\n    // the initial route name is either loaded asynchronously in the Layout Route\n    // or defined via a file system convention.\n    initialRouteName: node.initialRouteName,\n  };\n}\n\nexport function getReactNavigationScreensConfig(\n  nodes: RouteNode[]\n): Record<string, Screen> {\n  return Object.fromEntries(\n    nodes.map((node) => [node.route, convertRouteNodeToScreen(node)] as const)\n  );\n}\n\nexport function getNavigationConfig(routes: RouteNode): {\n  initialRouteName?: string;\n  screens: Record<string, Screen>;\n} {\n  return {\n    initialRouteName: routes.initialRouteName,\n    screens: getReactNavigationScreensConfig(routes.children),\n  };\n}\n\nexport function getLinkingConfig(routes: RouteNode): LinkingOptions<object> {\n  return {\n    prefixes: [],\n    // @ts-expect-error\n    config: getNavigationConfig(routes),\n    // A custom getInitialURL is used on native to ensure the app always starts at\n    // the root path if it's launched from something other than a deep link.\n    // This helps keep the native functionality working like the web functionality.\n    // For example, if you had a root navigator where the first screen was `/settings` and the second was `/index`\n    // then `/index` would be used on web and `/settings` would be used on native.\n    getInitialURL,\n    subscribe: addEventListener,\n    getStateFromPath: getStateFromPathMemoized,\n    getPathFromState,\n\n    // Add all functions to ensure the types never need to fallback.\n    // This is a convenience for usage in the package.\n    getActionFromState,\n  };\n}\n\nconst stateCache = new Map<string, any>();\n\n/** We can reduce work by memoizing the state by the pathname. This only works because the options (linking config) theoretically never change.  */\nfunction getStateFromPathMemoized(\n  path: string,\n  options: Parameters<typeof getStateFromPath>[1]\n) {\n  const cached = stateCache.get(path);\n  if (cached) {\n    return cached;\n  }\n  const result = getStateFromPath(path, options);\n  stateCache.set(path, result);\n  return result;\n}\n"],"mappings":"AAAA,OAAyBA,kBAAkB,KAAQ,0BAA0B,CAG7E,OACEC,gBAAgB,CAChBC,aAAa,CACbC,gBAAgB,CAChBC,gBAAgB,sBAElB,OAASC,yBAAyB,CAAEC,gBAAgB,kBAYpD,QAAS,CAAAC,oCAAoCA,CAACC,OAAe,CAAU,CAErE,GAAIA,OAAO,GAAK,OAAO,CAAE,CACvB,MAAO,EAAE,CACX,CAEA,GAAM,CAAAC,IAAI,CAAGJ,yBAAyB,CAACG,OAAO,CAAC,CAC/C,GAAIC,IAAI,EAAI,IAAI,CAAE,CAChB,MAAO,GAAG,CAAGA,IAAI,CACnB,CACA,GAAM,CAAAC,WAAW,CAAGJ,gBAAgB,CAACE,OAAO,CAAC,CAE7C,GAAIE,WAAW,EAAI,IAAI,CAAE,CACvB,UAAWA,WAAW,CACxB,CAEA,MAAO,CAAAF,OAAO,CAChB,CAEA,QAAS,CAAAG,kBAAkBA,CAACC,QAAgB,CAAU,CACpD,MAIE,CAAAA,QAAQ,CACLC,KAAK,CAAC,GAAG,CAAC,CAEVC,GAAG,CAACP,oCAAoC,CAAC,CAEzCQ,MAAM,CAACC,OAAO,CAAC,CAEfC,IAAI,CAAC,GAAG,CAAC,CAEhB,CAEA,QAAS,CAAAC,wBAAwBA,CAACC,IAAe,CAAU,CACzD,GAAM,CAAAC,IAAI,CAAGT,kBAAkB,CAACQ,IAAI,CAACE,KAAK,CAAC,CAC3C,GAAI,CAACF,IAAI,CAACG,QAAQ,CAACC,MAAM,CAAE,CACzB,MAAO,CAAAH,IAAI,CACb,CACA,GAAM,CAAAI,OAAO,CAAGC,+BAA+B,CAACN,IAAI,CAACG,QAAQ,CAAC,CAC9D,MAAO,CACLF,IAAI,CAAJA,IAAI,CACJI,OAAO,CAAPA,OAAO,CAKPE,gBAAgB,CAAEP,IAAI,CAACO,gBACzB,CAAC,CACH,CAEA,MAAO,SAAS,CAAAD,+BAA+BA,CAC7CE,KAAkB,CACM,CACxB,MAAO,CAAAC,MAAM,CAACC,WAAW,CACvBF,KAAK,CAACb,GAAG,CAAC,SAACK,IAAI,QAAK,CAACA,IAAI,CAACE,KAAK,CAAEH,wBAAwB,CAACC,IAAI,CAAC,CAAC,EAAS,CAAC,CAC3E,CACH,CAEA,MAAO,SAAS,CAAAW,mBAAmBA,CAACC,MAAiB,CAGnD,CACA,MAAO,CACLL,gBAAgB,CAAEK,MAAM,CAACL,gBAAgB,CACzCF,OAAO,CAAEC,+BAA+B,CAACM,MAAM,CAACT,QAAQ,CAC1D,CAAC,CACH,CAEA,MAAO,SAAS,CAAAU,gBAAgBA,CAACD,MAAiB,CAA0B,CAC1E,MAAO,CACLE,QAAQ,CAAE,EAAE,CAEZC,MAAM,CAAEJ,mBAAmB,CAACC,MAAM,CAAC,CAMnC7B,aAAa,CAAbA,aAAa,CACbiC,SAAS,CAAElC,gBAAgB,CAC3BG,gBAAgB,CAAEgC,wBAAwB,CAC1CjC,gBAAgB,CAAhBA,gBAAgB,CAIhBH,kBAAkB,CAAlBA,kBACF,CAAC,CACH,CAEA,GAAM,CAAAqC,UAAU,CAAG,GAAI,CAAAC,GAAG,EAAe,CAGzC,QAAS,CAAAF,wBAAwBA,CAC/BhB,IAAY,CACZmB,OAA+C,CAC/C,CACA,GAAM,CAAAC,MAAM,CAAGH,UAAU,CAACI,GAAG,CAACrB,IAAI,CAAC,CACnC,GAAIoB,MAAM,CAAE,CACV,MAAO,CAAAA,MAAM,CACf,CACA,GAAM,CAAAE,MAAM,CAAGtC,gBAAgB,CAACgB,IAAI,CAAEmB,OAAO,CAAC,CAC9CF,UAAU,CAACM,GAAG,CAACvB,IAAI,CAAEsB,MAAM,CAAC,CAC5B,MAAO,CAAAA,MAAM,CACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}