{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});var react_native_1=require(\"react-native-web/dist/index\");var LogBox;if(__DEV__){var LogBoxData=require(\"./Data/LogBoxData\");var _require=require(\"./Data/parseLogBoxLog\"),parseLogBoxLog=_require.parseLogBoxLog,parseInterpolation=_require.parseInterpolation;var originalConsoleError;var consoleErrorImpl;var isLogBoxInstalled=false;LogBox={install:function install(){if(isLogBoxInstalled){return;}isLogBoxInstalled=true;var isFirstInstall=originalConsoleError==null;if(isFirstInstall){originalConsoleError=console.error.bind(console);console.error=function(){consoleErrorImpl===null||consoleErrorImpl===void 0?void 0:consoleErrorImpl.apply(void 0,arguments);};}consoleErrorImpl=registerError;if(react_native_1.Platform.isTesting){LogBoxData.setDisabled(true);}},uninstall:function uninstall(){if(!isLogBoxInstalled){return;}isLogBoxInstalled=false;consoleErrorImpl=originalConsoleError;delete console.disableLogBox;},isInstalled:function isInstalled(){return isLogBoxInstalled;},ignoreLogs:function ignoreLogs(patterns){LogBoxData.addIgnorePatterns(patterns);},ignoreAllLogs:function ignoreAllLogs(value){LogBoxData.setDisabled(value==null?true:value);},clearAllLogs:function clearAllLogs(){LogBoxData.clear();},addLog:function addLog(log){if(isLogBoxInstalled){LogBoxData.addLog(log);}},addException:function addException(error){if(isLogBoxInstalled){LogBoxData.addException(error);}}};var isWarningModuleWarning=function isWarningModuleWarning(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return typeof args[0]===\"string\"&&args[0].startsWith(\"Warning: \");};var registerError=function registerError(){for(var _len2=arguments.length,args=new Array(_len2),_key2=0;_key2<_len2;_key2++){args[_key2]=arguments[_key2];}if(LogBoxData.isLogBoxErrorMessage(args[0])){originalConsoleError===null||originalConsoleError===void 0?void 0:originalConsoleError.apply(void 0,args);return;}try{if(!isWarningModuleWarning.apply(void 0,args)){originalConsoleError===null||originalConsoleError===void 0?void 0:originalConsoleError.apply(void 0,args);return;}var _parseLogBoxLog=parseLogBoxLog(args),message=_parseLogBoxLog.message;if(!LogBoxData.isMessageIgnored(message.content)){var interpolated=parseInterpolation(args);originalConsoleError===null||originalConsoleError===void 0?void 0:originalConsoleError(interpolated.message.content);}}catch(err){LogBoxData.reportUnexpectedLogBoxError(err);}};}else{LogBox={install:function install(){},uninstall:function uninstall(){},isInstalled:function isInstalled(){return false;},ignoreLogs:function ignoreLogs(patterns){},ignoreAllLogs:function ignoreAllLogs(value){},clearAllLogs:function clearAllLogs(){},addLog:function addLog(log){},addException:function addException(ex){}};}module.exports=LogBox;exports.default=LogBox;","map":{"version":3,"names":["LogBox","__DEV__","LogBoxData","require","_require","parseLogBoxLog","parseInterpolation","originalConsoleError","consoleErrorImpl","isLogBoxInstalled","install","isFirstInstall","console","error","bind","apply","arguments","registerError","react_native_1","Platform","isTesting","setDisabled","uninstall","disableLogBox","isInstalled","ignoreLogs","patterns","addIgnorePatterns","ignoreAllLogs","value","clearAllLogs","clear","addLog","log","addException","isWarningModuleWarning","_len","length","args","Array","_key","startsWith","_len2","_key2","isLogBoxErrorMessage","_parseLogBoxLog","message","isMessageIgnored","content","interpolated","err","reportUnexpectedLogBoxError","ex","module","exports","default"],"sources":["C:\\Riaz\\Projects\\JK\\JK_Frontend\\node_modules\\@expo\\metro-runtime\\src\\error-overlay\\LogBox.web.ts"],"sourcesContent":["/**\n * Copyright (c) Evan Bacon.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { Platform } from \"react-native\";\n\nimport { IgnorePattern, LogData } from \"./Data/LogBoxData\";\nimport { ExtendedExceptionData } from \"./Data/parseLogBoxLog\";\n\nexport { LogData, ExtendedExceptionData, IgnorePattern };\n\nlet LogBox: ILogBox;\n\ninterface ILogBox {\n  install(): void;\n  uninstall(): void;\n  isInstalled(): boolean;\n  ignoreLogs(patterns: readonly IgnorePattern[]): void;\n  ignoreAllLogs(ignore?: boolean): void;\n  clearAllLogs(): void;\n  addLog(log: LogData): void;\n  addException(error: ExtendedExceptionData): void;\n}\n\n/**\n * LogBox displays logs in the app.\n */\nif (__DEV__) {\n  const LogBoxData = require(\"./Data/LogBoxData\");\n  const {\n    parseLogBoxLog,\n    parseInterpolation,\n  } = require(\"./Data/parseLogBoxLog\");\n\n  let originalConsoleError: typeof console.error | undefined;\n  let consoleErrorImpl: typeof console.error | undefined;\n\n  let isLogBoxInstalled: boolean = false;\n\n  LogBox = {\n    install(): void {\n      if (isLogBoxInstalled) {\n        return;\n      }\n\n      isLogBoxInstalled = true;\n\n      // Trigger lazy initialization of module.\n      // require(\"../NativeModules/specs/NativeLogBox\");\n\n      // IMPORTANT: we only overwrite `console.error` and `console.warn` once.\n      // When we uninstall we keep the same reference and only change its\n      // internal implementation\n      const isFirstInstall = originalConsoleError == null;\n      if (isFirstInstall) {\n        originalConsoleError = console.error.bind(console);\n\n        console.error = (...args) => {\n          consoleErrorImpl?.(...args);\n        };\n      }\n\n      consoleErrorImpl = registerError;\n\n      if (Platform.isTesting) {\n        LogBoxData.setDisabled(true);\n      }\n    },\n\n    uninstall(): void {\n      if (!isLogBoxInstalled) {\n        return;\n      }\n\n      isLogBoxInstalled = false;\n\n      // IMPORTANT: we don't re-assign to `console` in case the method has been\n      // decorated again after installing LogBox. E.g.:\n      // Before uninstalling: original > LogBox > OtherErrorHandler\n      // After uninstalling:  original > LogBox (noop) > OtherErrorHandler\n      consoleErrorImpl = originalConsoleError;\n      delete (console as any).disableLogBox;\n    },\n\n    isInstalled(): boolean {\n      return isLogBoxInstalled;\n    },\n\n    ignoreLogs(patterns: readonly IgnorePattern[]): void {\n      LogBoxData.addIgnorePatterns(patterns);\n    },\n\n    ignoreAllLogs(value?: boolean): void {\n      LogBoxData.setDisabled(value == null ? true : value);\n    },\n\n    clearAllLogs(): void {\n      LogBoxData.clear();\n    },\n\n    addLog(log: LogData): void {\n      if (isLogBoxInstalled) {\n        LogBoxData.addLog(log);\n      }\n    },\n\n    addException(error: ExtendedExceptionData): void {\n      if (isLogBoxInstalled) {\n        LogBoxData.addException(error);\n      }\n    },\n  };\n\n  const isWarningModuleWarning = (...args: any) => {\n    return typeof args[0] === \"string\" && args[0].startsWith(\"Warning: \");\n  };\n\n  const registerError = (...args: Parameters<typeof console.error>): void => {\n    // Let errors within LogBox itself fall through.\n    if (LogBoxData.isLogBoxErrorMessage(args[0])) {\n      originalConsoleError?.(...args);\n      return;\n    }\n\n    try {\n      if (!isWarningModuleWarning(...args)) {\n        // Only show LogBox for the 'warning' module, otherwise pass through.\n        // By passing through, this will get picked up by the React console override,\n        // potentially adding the component stack. React then passes it back to the\n        // React Native ExceptionsManager, which reports it to LogBox as an error.\n        //\n        // The 'warning' module needs to be handled here because React internally calls\n        // `console.error('Warning: ')` with the component stack already included.\n        originalConsoleError?.(...args);\n        return;\n      }\n\n      const { message } = parseLogBoxLog(args);\n\n      if (!LogBoxData.isMessageIgnored(message.content)) {\n        // Interpolate the message so they are formatted for adb and other CLIs.\n        // This is different than the message.content above because it includes component stacks.\n        const interpolated = parseInterpolation(args);\n        originalConsoleError?.(interpolated.message.content);\n      }\n    } catch (err) {\n      LogBoxData.reportUnexpectedLogBoxError(err);\n    }\n  };\n} else {\n  LogBox = {\n    install(): void {},\n    uninstall(): void {},\n    isInstalled(): boolean {\n      return false;\n    },\n    ignoreLogs(patterns: readonly IgnorePattern[]): void {},\n    ignoreAllLogs(value?: boolean): void {},\n    clearAllLogs(): void {},\n    addLog(log: LogData): void {},\n    addException(ex: ExtendedExceptionData): void {},\n  };\n}\n\nmodule.exports = LogBox;\n\nexport default LogBox;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}