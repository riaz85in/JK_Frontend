{"ast":null,"code":"import React,{createContext,useContext,useMemo}from\"react\";import{getRoutes}from\"./getRoutes\";import{jsx as _jsx}from\"react/jsx-runtime\";export var RootRouteNodeContext=createContext(null);if(process.env.NODE_ENV!==\"production\"){RootRouteNodeContext.displayName=\"RoutesContext\";}export function useRootRouteNodeContext(){var routes=useContext(RootRouteNodeContext);if(!routes){throw new Error(\"useRootRouteNodeContext is being used outside of RootRouteNodeContext.Provider\");}return routes;}export function RootRouteNodeProvider(_ref){var context=_ref.context,children=_ref.children;var keys=useMemo(function(){return context.keys();},[context]);var routes=useMemo(function(){return getRoutes(context);},[keys]);return _jsx(RootRouteNodeContext.Provider,{value:routes,children:children});}","map":{"version":3,"names":["React","createContext","useContext","useMemo","getRoutes","jsx","_jsx","RootRouteNodeContext","process","env","NODE_ENV","displayName","useRootRouteNodeContext","routes","Error","RootRouteNodeProvider","_ref","context","children","keys","Provider","value"],"sources":["C:/Riaz/Projects/JK/JK_Frontend/node_modules/expo-router/src/useRootRouteNodeContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useMemo } from \"react\";\n\nimport { RouteNode } from \"./Route\";\nimport { getRoutes } from \"./getRoutes\";\nimport { RequireContext } from \"./types\";\n\n// Routes context\nexport const RootRouteNodeContext = createContext<RouteNode | null>(null);\n\nif (process.env.NODE_ENV !== \"production\") {\n  RootRouteNodeContext.displayName = \"RoutesContext\";\n}\n\nexport function useRootRouteNodeContext() {\n  const routes = useContext(RootRouteNodeContext);\n  if (!routes) {\n    throw new Error(\n      \"useRootRouteNodeContext is being used outside of RootRouteNodeContext.Provider\"\n    );\n  }\n  return routes;\n}\n\n/** Provide the require context as normalized routes. */\nexport function RootRouteNodeProvider({\n  context,\n  children,\n}: {\n  context: RequireContext;\n  children: React.ReactNode;\n}) {\n  // TODO: Is this an optimal hook dependency?\n  const keys = useMemo(() => context.keys(), [context]);\n  const routes = useMemo(() => getRoutes(context), [keys]);\n  return (\n    <RootRouteNodeContext.Provider value={routes}>\n      {children}\n    </RootRouteNodeContext.Provider>\n  );\n}\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,OAAO,KAAQ,OAAO,CAGjE,OAASC,SAAS,mBAAsB,OAAAC,GAAA,IAAAC,IAAA,yBAIxC,MAAO,IAAM,CAAAC,oBAAoB,CAAGN,aAAa,CAAmB,IAAI,CAAC,CAEzE,GAAIO,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAK,YAAY,CAAE,CACzCH,oBAAoB,CAACI,WAAW,CAAG,eAAe,CACpD,CAEA,MAAO,SAAS,CAAAC,uBAAuBA,CAAA,CAAG,CACxC,GAAM,CAAAC,MAAM,CAAGX,UAAU,CAACK,oBAAoB,CAAC,CAC/C,GAAI,CAACM,MAAM,CAAE,CACX,KAAM,IAAI,CAAAC,KAAK,CACb,gFAAgF,CACjF,CACH,CACA,MAAO,CAAAD,MAAM,CACf,CAGA,MAAO,SAAS,CAAAE,qBAAqBA,CAAAC,IAAA,CAMlC,IALD,CAAAC,OAAO,CAAAD,IAAA,CAAPC,OAAO,CACPC,QAAQ,CAAAF,IAAA,CAARE,QAAQ,CAMR,GAAM,CAAAC,IAAI,CAAGhB,OAAO,CAAC,iBAAM,CAAAc,OAAO,CAACE,IAAI,EAAE,GAAE,CAACF,OAAO,CAAC,CAAC,CACrD,GAAM,CAAAJ,MAAM,CAAGV,OAAO,CAAC,iBAAM,CAAAC,SAAS,CAACa,OAAO,CAAC,GAAE,CAACE,IAAI,CAAC,CAAC,CACxD,MACE,CAAAb,IAAA,CAACC,oBAAoB,CAACa,QAAQ,EAACC,KAAK,CAAER,MAAO,CAAAK,QAAA,CAC1CA,QAAQ,EACqB,CAEpC"},"metadata":{},"sourceType":"module","externalDependencies":[]}