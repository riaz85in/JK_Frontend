{"ast":null,"code":"import{LinkingContext}from\"@react-navigation/native\";import*as React from\"react\";export function useLinkingContext(){var linking=React.useContext(LinkingContext);var options=linking.options;assertLinkingOptions(options);return options;}function assertLinkingOptions(options){if(!(options!=null&&options.config)){throw new Error(\"Couldn't find a linking config. Is your component inside a navigator?\");}}","map":{"version":3,"names":["LinkingContext","React","useLinkingContext","linking","useContext","options","assertLinkingOptions","config","Error"],"sources":["C:/Riaz/Projects/JK/JK_Frontend/node_modules/expo-router/src/link/useLinkingContext.ts"],"sourcesContent":["import {\n  LinkingContext,\n  LinkingOptions,\n  ParamListBase,\n} from \"@react-navigation/native\";\nimport * as React from \"react\";\n\nimport getPathFromState from \"../fork/getPathFromState\";\n\nexport type RouterLinkingContext = Required<\n  Omit<LinkingOptions<ParamListBase>, \"filter\" | \"enabled\">\n> & {\n  getPathFromState: typeof getPathFromState;\n};\n\nexport function useLinkingContext(): RouterLinkingContext {\n  const linking = React.useContext(LinkingContext);\n\n  const { options } = linking;\n\n  assertLinkingOptions(options);\n\n  return options;\n}\n\nfunction assertLinkingOptions(\n  options: LinkingOptions<ParamListBase> | undefined\n): asserts options is RouterLinkingContext {\n  if (!options?.config) {\n    // This should never happen in Expo Router.\n    throw new Error(\n      \"Couldn't find a linking config. Is your component inside a navigator?\"\n    );\n  }\n}\n"],"mappings":"AAAA,OACEA,cAAc,KAGT,0BAA0B,CACjC,MAAO,GAAK,CAAAC,KAAK,KAAM,OAAO,CAU9B,MAAO,SAAS,CAAAC,iBAAiBA,CAAA,CAAyB,CACxD,GAAM,CAAAC,OAAO,CAAGF,KAAK,CAACG,UAAU,CAACJ,cAAc,CAAC,CAEhD,GAAQ,CAAAK,OAAO,CAAKF,OAAO,CAAnBE,OAAO,CAEfC,oBAAoB,CAACD,OAAO,CAAC,CAE7B,MAAO,CAAAA,OAAO,CAChB,CAEA,QAAS,CAAAC,oBAAoBA,CAC3BD,OAAkD,CACT,CACzC,GAAI,EAACA,OAAO,QAAPA,OAAO,CAAEE,MAAM,EAAE,CAEpB,KAAM,IAAI,CAAAC,KAAK,CACb,uEAAuE,CACxE,CACH,CACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}