{"ast":null,"code":"import findNodeHandle from\"react-native-web/dist/exports/findNodeHandle\";import{isChromeDebugger,isWeb,shouldBeUseWeb}from\"./PlatformChecker\";export function getTag(view){return findNodeHandle(view);}var isNative=!shouldBeUseWeb();export var measure;if(isWeb()){measure=function measure(animatedRef){var element=animatedRef();var viewportOffset=element.getBoundingClientRect();return{width:element.offsetWidth,height:element.offsetHeight,x:element.offsetLeft,y:element.offsetTop,pageX:viewportOffset.left,pageY:viewportOffset.top};};}else if(isChromeDebugger()){measure=function measure(_animatedRef){console.warn('[Reanimated] measure() cannot be used with Chrome Debugger.');return null;};}else{measure=function measure(animatedRef){'worklet';if(!_WORKLET){console.warn('[Reanimated] measure() was called from the main JS context. Measure is '+'only available in the UI runtime. This may also happen if measure() '+'was called by a worklet in the useAnimatedStyle hook, because useAnimatedStyle '+'calls the given worklet on the JS runtime during render. If you want to '+'prevent this warning then wrap the call with `if (_WORKLET)`. Then it will '+'only be called on the UI runtime after the render has been completed.');return null;}var viewTag=animatedRef();if(viewTag===-1){console.warn(\"[Reanimated] The view with tag \"+viewTag+\" is not a valid argument for measure(). This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).\");return null;}var measured=_measure(viewTag);if(measured===null){console.warn(\"[Reanimated] The view with tag \"+viewTag+\" has some undefined, not-yet-computed or meaningless value of `LayoutMetrics` type. This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).\");return null;}else if(measured.x===-1234567){console.warn(\"[Reanimated] The view with tag \"+viewTag+\" returned an invalid measurement response.\");return null;}else if(isNaN(measured.x)){console.warn(\"[Reanimated] The view with tag \"+viewTag+\" gets view-flattened on Android. To disable view-flattening, set `collapsable={false}` on this component.\");return null;}else{return measured;}};}export var scrollTo;if(isWeb()){scrollTo=function scrollTo(animatedRef,x,y,animated){'worklet';var element=animatedRef();element.scrollTo({x:x,y:y,animated:animated});};}else if(isNative){scrollTo=function scrollTo(animatedRef,x,y,animated){'worklet';if(!_WORKLET){return;}var viewTag=animatedRef();_scrollTo(viewTag,x,y,animated);};}else{scrollTo=function scrollTo(_animatedRef,_x,_y){};}export function setGestureState(handlerTag,newState){'worklet';if(!_WORKLET||!isNative){console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');return;}_setGestureState(handlerTag,newState);}","map":{"version":3,"names":["isChromeDebugger","isWeb","shouldBeUseWeb","getTag","view","findNodeHandle","isNative","measure","animatedRef","element","viewportOffset","getBoundingClientRect","width","offsetWidth","height","offsetHeight","x","offsetLeft","y","offsetTop","pageX","left","pageY","top","_animatedRef","console","warn","_WORKLET","viewTag","measured","_measure","isNaN","scrollTo","animated","_scrollTo","_x","_y","setGestureState","handlerTag","newState","_setGestureState"],"sources":["C:/Riaz/Projects/JK/JK_Frontend/node_modules/react-native-reanimated/lib/reanimated2/NativeMethods.js"],"sourcesContent":["import { findNodeHandle } from 'react-native';\nimport { isChromeDebugger, isWeb, shouldBeUseWeb } from './PlatformChecker';\nexport function getTag(view) {\n    return findNodeHandle(view);\n}\nconst isNative = !shouldBeUseWeb();\nexport let measure;\nif (isWeb()) {\n    measure = (animatedRef) => {\n        const element = animatedRef(); // TODO: fix typing of animated refs on web\n        const viewportOffset = element.getBoundingClientRect();\n        return {\n            width: element.offsetWidth,\n            height: element.offsetHeight,\n            x: element.offsetLeft,\n            y: element.offsetTop,\n            pageX: viewportOffset.left,\n            pageY: viewportOffset.top,\n        };\n    };\n}\nelse if (isChromeDebugger()) {\n    measure = (_animatedRef) => {\n        console.warn('[Reanimated] measure() cannot be used with Chrome Debugger.');\n        return null;\n    };\n}\nelse {\n    measure = (animatedRef) => {\n        'worklet';\n        if (!_WORKLET) {\n            console.warn('[Reanimated] measure() was called from the main JS context. Measure is ' +\n                'only available in the UI runtime. This may also happen if measure() ' +\n                'was called by a worklet in the useAnimatedStyle hook, because useAnimatedStyle ' +\n                'calls the given worklet on the JS runtime during render. If you want to ' +\n                'prevent this warning then wrap the call with `if (_WORKLET)`. Then it will ' +\n                'only be called on the UI runtime after the render has been completed.');\n            return null;\n        }\n        const viewTag = animatedRef();\n        if (viewTag === -1) {\n            console.warn(`[Reanimated] The view with tag ${viewTag} is not a valid argument for measure(). This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).`);\n            return null;\n        }\n        const measured = _measure(viewTag);\n        if (measured === null) {\n            console.warn(`[Reanimated] The view with tag ${viewTag} has some undefined, not-yet-computed or meaningless value of \\`LayoutMetrics\\` type. This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).`);\n            return null;\n        }\n        else if (measured.x === -1234567) {\n            console.warn(`[Reanimated] The view with tag ${viewTag} returned an invalid measurement response.`);\n            return null;\n        }\n        else if (isNaN(measured.x)) {\n            console.warn(`[Reanimated] The view with tag ${viewTag} gets view-flattened on Android. To disable view-flattening, set \\`collapsable={false}\\` on this component.`);\n            return null;\n        }\n        else {\n            return measured;\n        }\n    };\n}\nexport let scrollTo;\nif (isWeb()) {\n    scrollTo = (animatedRef, x, y, animated) => {\n        'worklet';\n        const element = animatedRef();\n        // @ts-ignore same call as in react-native-web\n        element.scrollTo({ x, y, animated });\n    };\n}\nelse if (isNative) {\n    scrollTo = (animatedRef, x, y, animated) => {\n        'worklet';\n        if (!_WORKLET) {\n            return;\n        }\n        const viewTag = animatedRef();\n        _scrollTo(viewTag, x, y, animated);\n    };\n}\nelse {\n    scrollTo = (_animatedRef, _x, _y) => {\n        // no-op\n    };\n}\nexport function setGestureState(handlerTag, newState) {\n    'worklet';\n    if (!_WORKLET || !isNative) {\n        console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');\n        return;\n    }\n    _setGestureState(handlerTag, newState);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}