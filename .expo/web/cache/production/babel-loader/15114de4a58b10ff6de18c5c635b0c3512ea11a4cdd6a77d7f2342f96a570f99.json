{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import{State}from\"../../State\";import{PointerType}from\"../interfaces\";import PointerTracker from\"./PointerTracker\";import{isPointerInBounds}from\"../utils\";var GestureHandlerOrchestrator=function(){function GestureHandlerOrchestrator(){_classCallCheck(this,GestureHandlerOrchestrator);_defineProperty(this,\"gestureHandlers\",[]);_defineProperty(this,\"awaitingHandlers\",[]);_defineProperty(this,\"handlersToCancel\",[]);_defineProperty(this,\"handlingChangeSemaphore\",0);_defineProperty(this,\"activationIndex\",0);}_createClass(GestureHandlerOrchestrator,[{key:\"scheduleFinishedHandlersCleanup\",value:function scheduleFinishedHandlersCleanup(){if(this.handlingChangeSemaphore===0){this.cleanupFinishedHandlers();}}},{key:\"cleanHandler\",value:function cleanHandler(handler){handler.reset();handler.setActive(false);handler.setAwaiting(false);handler.setActivationIndex(Number.MAX_VALUE);}},{key:\"removeHandlerFromOrchestrator\",value:function removeHandlerFromOrchestrator(handler){this.gestureHandlers.splice(this.gestureHandlers.indexOf(handler),1);this.awaitingHandlers.splice(this.awaitingHandlers.indexOf(handler),1);this.handlersToCancel.splice(this.handlersToCancel.indexOf(handler),1);}},{key:\"cleanupFinishedHandlers\",value:function cleanupFinishedHandlers(){for(var i=this.gestureHandlers.length-1;i>=0;--i){var handler=this.gestureHandlers[i];if(!handler){continue;}if(this.isFinished(handler.getState())&&!handler.isAwaiting()){this.gestureHandlers.splice(i,1);this.cleanHandler(handler);}}}},{key:\"hasOtherHandlerToWaitFor\",value:function hasOtherHandlerToWaitFor(handler){var _this=this;var hasToWait=false;this.gestureHandlers.forEach(function(otherHandler){if(otherHandler&&!_this.isFinished(otherHandler.getState())&&_this.shouldHandlerWaitForOther(handler,otherHandler)){hasToWait=true;return;}});return hasToWait;}},{key:\"tryActivate\",value:function tryActivate(handler){if(this.hasOtherHandlerToWaitFor(handler)){this.addAwaitingHandler(handler);}else if(handler.getState()!==State.CANCELLED&&handler.getState()!==State.FAILED){if(this.shouldActivate(handler)){this.makeActive(handler);}else{switch(handler.getState()){case State.ACTIVE:handler.fail();break;case State.BEGAN:handler.cancel();}}}}},{key:\"shouldActivate\",value:function shouldActivate(handler){for(var otherHandler of this.gestureHandlers){if(this.shouldHandlerBeCancelledBy(handler,otherHandler)){return false;}}return true;}},{key:\"cleanupAwaitingHandlers\",value:function cleanupAwaitingHandlers(handler){for(var i=0;i<this.awaitingHandlers.length;++i){if(!this.awaitingHandlers[i].isAwaiting()&&this.shouldHandlerWaitForOther(this.awaitingHandlers[i],handler)){this.cleanHandler(this.awaitingHandlers[i]);this.awaitingHandlers.splice(i,1);}}}},{key:\"onHandlerStateChange\",value:function onHandlerStateChange(handler,newState,oldState,sendIfDisabled){var _this2=this;if(!handler.isEnabled()&&!sendIfDisabled){return;}this.handlingChangeSemaphore+=1;if(this.isFinished(newState)){this.awaitingHandlers.forEach(function(otherHandler){if(_this2.shouldHandlerWaitForOther(otherHandler,handler)){if(newState===State.END){otherHandler===null||otherHandler===void 0?void 0:otherHandler.cancel();if(otherHandler.getState()===State.END){otherHandler.sendEvent(State.CANCELLED,State.BEGAN);}otherHandler===null||otherHandler===void 0?void 0:otherHandler.setAwaiting(false);}else{_this2.tryActivate(otherHandler);}}});}if(newState===State.ACTIVE){this.tryActivate(handler);}else if(oldState===State.ACTIVE||oldState===State.END){if(handler.isActive()){handler.sendEvent(newState,oldState);}else if(oldState===State.ACTIVE&&(newState===State.CANCELLED||newState===State.FAILED)){handler.sendEvent(newState,State.BEGAN);}}else if(oldState!==State.UNDETERMINED||newState!==State.CANCELLED){handler.sendEvent(newState,oldState);}this.handlingChangeSemaphore-=1;this.scheduleFinishedHandlersCleanup();if(this.awaitingHandlers.indexOf(handler)<0){this.cleanupAwaitingHandlers(handler);}}},{key:\"makeActive\",value:function makeActive(handler){var _this3=this;var currentState=handler.getState();handler.setActive(true);handler.setShouldResetProgress(true);handler.setActivationIndex(this.activationIndex++);this.gestureHandlers.forEach(function(otherHandler){if(_this3.shouldHandlerBeCancelledBy(otherHandler,handler)){_this3.handlersToCancel.push(otherHandler);}});for(var i=this.handlersToCancel.length-1;i>=0;--i){var _this$handlersToCance;(_this$handlersToCance=this.handlersToCancel[i])===null||_this$handlersToCance===void 0?void 0:_this$handlersToCance.cancel();}this.awaitingHandlers.forEach(function(otherHandler){if(_this3.shouldHandlerBeCancelledBy(otherHandler,handler)){otherHandler===null||otherHandler===void 0?void 0:otherHandler.cancel();otherHandler===null||otherHandler===void 0?void 0:otherHandler.setAwaiting(true);}});handler.sendEvent(State.ACTIVE,State.BEGAN);if(currentState!==State.ACTIVE){handler.sendEvent(State.END,State.ACTIVE);if(currentState!==State.END){handler.sendEvent(State.UNDETERMINED,State.END);}}if(handler.isAwaiting()){handler.setAwaiting(false);for(var _i=0;_i<this.awaitingHandlers.length;++_i){if(this.awaitingHandlers[_i]===handler){this.awaitingHandlers.splice(_i,1);}}}this.handlersToCancel=[];}},{key:\"addAwaitingHandler\",value:function addAwaitingHandler(handler){var alreadyExists=false;this.awaitingHandlers.forEach(function(otherHandler){if(otherHandler===handler){alreadyExists=true;return;}});if(alreadyExists){return;}this.awaitingHandlers.push(handler);handler.setAwaiting(true);handler.setActivationIndex(this.activationIndex++);}},{key:\"recordHandlerIfNotPresent\",value:function recordHandlerIfNotPresent(handler){var alreadyExists=false;this.gestureHandlers.forEach(function(otherHandler){if(otherHandler===handler){alreadyExists=true;return;}});if(alreadyExists){return;}this.gestureHandlers.push(handler);handler.setActive(false);handler.setAwaiting(false);handler.setActivationIndex(Number.MAX_SAFE_INTEGER);}},{key:\"shouldHandlerWaitForOther\",value:function shouldHandlerWaitForOther(handler,otherHandler){return handler!==otherHandler&&(handler.shouldWaitForHandlerFailure(otherHandler)||otherHandler.shouldRequireToWaitForFailure(handler));}},{key:\"canRunSimultaneously\",value:function canRunSimultaneously(gh1,gh2){return gh1===gh2||gh1.shouldRecognizeSimultaneously(gh2)||gh2.shouldRecognizeSimultaneously(gh1);}},{key:\"shouldHandlerBeCancelledBy\",value:function shouldHandlerBeCancelledBy(handler,otherHandler){if(this.canRunSimultaneously(handler,otherHandler)){return false;}if(handler!==otherHandler&&(handler.isAwaiting()||handler.getState()===State.ACTIVE)){return handler.shouldBeCancelledByOther(otherHandler);}var handlerPointers=handler.getTrackedPointersID();var otherPointers=otherHandler.getTrackedPointersID();if(!PointerTracker.shareCommonPointers(handlerPointers,otherPointers)&&handler.getView()!==otherHandler.getView()){return this.checkOverlap(handler,otherHandler);}return true;}},{key:\"checkOverlap\",value:function checkOverlap(handler,otherHandler){var handlerPointers=handler.getTrackedPointersID();var otherPointers=otherHandler.getTrackedPointersID();var overlap=false;handlerPointers.forEach(function(pointer){var handlerX=handler.getTracker().getLastX(pointer);var handlerY=handler.getTracker().getLastY(pointer);if(isPointerInBounds(handler.getView(),{x:handlerX,y:handlerY})&&isPointerInBounds(otherHandler.getView(),{x:handlerX,y:handlerY})){overlap=true;}});otherPointers.forEach(function(pointer){var otherX=otherHandler.getTracker().getLastX(pointer);var otherY=otherHandler.getTracker().getLastY(pointer);if(isPointerInBounds(handler.getView(),{x:otherX,y:otherY})&&isPointerInBounds(otherHandler.getView(),{x:otherX,y:otherY})){overlap=true;}});return overlap;}},{key:\"isFinished\",value:function isFinished(state){return state===State.END||state===State.FAILED||state===State.CANCELLED;}},{key:\"cancelMouseAndPenGestures\",value:function cancelMouseAndPenGestures(currentHandler){this.gestureHandlers.forEach(function(handler){if(handler.getPointerType()!==PointerType.MOUSE&&handler.getPointerType()!==PointerType.PEN){return;}if(handler!==currentHandler){handler.cancel();}else{handler.getTracker().resetTracker();}});}}],[{key:\"getInstance\",value:function getInstance(){if(!GestureHandlerOrchestrator.instance){GestureHandlerOrchestrator.instance=new GestureHandlerOrchestrator();}return GestureHandlerOrchestrator.instance;}}]);return GestureHandlerOrchestrator;}();export{GestureHandlerOrchestrator as default};_defineProperty(GestureHandlerOrchestrator,\"instance\",void 0);","map":{"version":3,"names":["State","PointerType","PointerTracker","isPointerInBounds","GestureHandlerOrchestrator","_classCallCheck","_defineProperty","_createClass","key","value","scheduleFinishedHandlersCleanup","handlingChangeSemaphore","cleanupFinishedHandlers","cleanHandler","handler","reset","setActive","setAwaiting","setActivationIndex","Number","MAX_VALUE","removeHandlerFromOrchestrator","gestureHandlers","splice","indexOf","awaitingHandlers","handlersToCancel","i","length","isFinished","getState","isAwaiting","hasOtherHandlerToWaitFor","_this","hasToWait","forEach","otherHandler","shouldHandlerWaitForOther","tryActivate","addAwaitingHandler","CANCELLED","FAILED","shouldActivate","makeActive","ACTIVE","fail","BEGAN","cancel","shouldHandlerBeCancelledBy","cleanupAwaitingHandlers","onHandlerStateChange","newState","oldState","sendIfDisabled","_this2","isEnabled","END","sendEvent","isActive","UNDETERMINED","_this3","currentState","setShouldResetProgress","activationIndex","push","_this$handlersToCance","alreadyExists","recordHandlerIfNotPresent","MAX_SAFE_INTEGER","shouldWaitForHandlerFailure","shouldRequireToWaitForFailure","canRunSimultaneously","gh1","gh2","shouldRecognizeSimultaneously","shouldBeCancelledByOther","handlerPointers","getTrackedPointersID","otherPointers","shareCommonPointers","getView","checkOverlap","overlap","pointer","handlerX","getTracker","getLastX","handlerY","getLastY","x","y","otherX","otherY","state","cancelMouseAndPenGestures","currentHandler","getPointerType","MOUSE","PEN","resetTracker","getInstance","instance","default"],"sources":["C:\\Riaz\\Projects\\JK\\JK_Frontend\\node_modules\\react-native-gesture-handler\\lib\\module\\web\\tools\\GestureHandlerOrchestrator.ts"],"sourcesContent":["import { State } from '../../State';\nimport { PointerType } from '../interfaces';\n\nimport GestureHandler from '../handlers/GestureHandler';\nimport PointerTracker from './PointerTracker';\nimport { isPointerInBounds } from '../utils';\n\nexport default class GestureHandlerOrchestrator {\n  private static instance: GestureHandlerOrchestrator;\n\n  private gestureHandlers: GestureHandler[] = [];\n  private awaitingHandlers: GestureHandler[] = [];\n  private handlersToCancel: GestureHandler[] = [];\n\n  private handlingChangeSemaphore = 0;\n  private activationIndex = 0;\n\n  // Private beacuse of Singleton\n  // eslint-disable-next-line no-useless-constructor, @typescript-eslint/no-empty-function\n  private constructor() {}\n\n  private scheduleFinishedHandlersCleanup(): void {\n    if (this.handlingChangeSemaphore === 0) {\n      this.cleanupFinishedHandlers();\n    }\n  }\n\n  private cleanHandler(handler: GestureHandler): void {\n    handler.reset();\n    handler.setActive(false);\n    handler.setAwaiting(false);\n    handler.setActivationIndex(Number.MAX_VALUE);\n  }\n\n  public removeHandlerFromOrchestrator(handler: GestureHandler): void {\n    this.gestureHandlers.splice(this.gestureHandlers.indexOf(handler), 1);\n    this.awaitingHandlers.splice(this.awaitingHandlers.indexOf(handler), 1);\n    this.handlersToCancel.splice(this.handlersToCancel.indexOf(handler), 1);\n  }\n\n  private cleanupFinishedHandlers(): void {\n    for (let i = this.gestureHandlers.length - 1; i >= 0; --i) {\n      const handler = this.gestureHandlers[i];\n\n      if (!handler) {\n        continue;\n      }\n      if (this.isFinished(handler.getState()) && !handler.isAwaiting()) {\n        this.gestureHandlers.splice(i, 1);\n\n        this.cleanHandler(handler);\n      }\n    }\n  }\n\n  private hasOtherHandlerToWaitFor(handler: GestureHandler): boolean {\n    let hasToWait = false;\n    this.gestureHandlers.forEach((otherHandler) => {\n      if (\n        otherHandler &&\n        !this.isFinished(otherHandler.getState()) &&\n        this.shouldHandlerWaitForOther(handler, otherHandler)\n      ) {\n        hasToWait = true;\n        return;\n      }\n    });\n\n    return hasToWait;\n  }\n\n  private tryActivate(handler: GestureHandler): void {\n    if (this.hasOtherHandlerToWaitFor(handler)) {\n      this.addAwaitingHandler(handler);\n    } else if (\n      handler.getState() !== State.CANCELLED &&\n      handler.getState() !== State.FAILED\n    ) {\n      if (this.shouldActivate(handler)) {\n        this.makeActive(handler);\n      } else {\n        switch (handler.getState()) {\n          case State.ACTIVE:\n            handler.fail();\n            break;\n          case State.BEGAN:\n            handler.cancel();\n        }\n      }\n    }\n  }\n\n  private shouldActivate(handler: GestureHandler): boolean {\n    for (const otherHandler of this.gestureHandlers) {\n      if (this.shouldHandlerBeCancelledBy(handler, otherHandler)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private cleanupAwaitingHandlers(handler: GestureHandler): void {\n    for (let i = 0; i < this.awaitingHandlers.length; ++i) {\n      if (\n        !this.awaitingHandlers[i].isAwaiting() &&\n        this.shouldHandlerWaitForOther(this.awaitingHandlers[i], handler)\n      ) {\n        this.cleanHandler(this.awaitingHandlers[i]);\n        this.awaitingHandlers.splice(i, 1);\n      }\n    }\n  }\n\n  public onHandlerStateChange(\n    handler: GestureHandler,\n    newState: State,\n    oldState: State,\n    sendIfDisabled?: boolean\n  ): void {\n    if (!handler.isEnabled() && !sendIfDisabled) {\n      return;\n    }\n\n    this.handlingChangeSemaphore += 1;\n\n    if (this.isFinished(newState)) {\n      this.awaitingHandlers.forEach((otherHandler) => {\n        if (this.shouldHandlerWaitForOther(otherHandler, handler)) {\n          if (newState === State.END) {\n            otherHandler?.cancel();\n            if (otherHandler.getState() === State.END) {\n              // Handle edge case, where discrete gestures end immediately after activation thus\n              // their state is set to END and when the gesture they are waiting for activates they\n              // should be cancelled, however `cancel` was never sent as gestures were already in the END state.\n              // Send synthetic BEGAN -> CANCELLED to properly handle JS logic\n              otherHandler.sendEvent(State.CANCELLED, State.BEGAN);\n            }\n            otherHandler?.setAwaiting(false);\n          } else {\n            this.tryActivate(otherHandler);\n          }\n        }\n      });\n    }\n\n    if (newState === State.ACTIVE) {\n      this.tryActivate(handler);\n    } else if (oldState === State.ACTIVE || oldState === State.END) {\n      if (handler.isActive()) {\n        handler.sendEvent(newState, oldState);\n      } else if (\n        oldState === State.ACTIVE &&\n        (newState === State.CANCELLED || newState === State.FAILED)\n      ) {\n        handler.sendEvent(newState, State.BEGAN);\n      }\n    } else if (\n      oldState !== State.UNDETERMINED ||\n      newState !== State.CANCELLED\n    ) {\n      handler.sendEvent(newState, oldState);\n    }\n\n    this.handlingChangeSemaphore -= 1;\n\n    this.scheduleFinishedHandlersCleanup();\n\n    if (this.awaitingHandlers.indexOf(handler) < 0) {\n      this.cleanupAwaitingHandlers(handler);\n    }\n  }\n\n  private makeActive(handler: GestureHandler): void {\n    const currentState = handler.getState();\n\n    handler.setActive(true);\n    handler.setShouldResetProgress(true);\n    handler.setActivationIndex(this.activationIndex++);\n\n    this.gestureHandlers.forEach((otherHandler) => {\n      // Order of arguments is correct - we check whether current handler should cancel existing handlers\n\n      if (this.shouldHandlerBeCancelledBy(otherHandler, handler)) {\n        this.handlersToCancel.push(otherHandler);\n      }\n    });\n\n    for (let i = this.handlersToCancel.length - 1; i >= 0; --i) {\n      this.handlersToCancel[i]?.cancel();\n    }\n    this.awaitingHandlers.forEach((otherHandler) => {\n      if (this.shouldHandlerBeCancelledBy(otherHandler, handler)) {\n        otherHandler?.cancel();\n        otherHandler?.setAwaiting(true);\n      }\n    });\n\n    handler.sendEvent(State.ACTIVE, State.BEGAN);\n\n    if (currentState !== State.ACTIVE) {\n      handler.sendEvent(State.END, State.ACTIVE);\n      if (currentState !== State.END) {\n        handler.sendEvent(State.UNDETERMINED, State.END);\n      }\n    }\n\n    if (handler.isAwaiting()) {\n      handler.setAwaiting(false);\n      for (let i = 0; i < this.awaitingHandlers.length; ++i) {\n        if (this.awaitingHandlers[i] === handler) {\n          this.awaitingHandlers.splice(i, 1);\n        }\n      }\n    }\n\n    this.handlersToCancel = [];\n  }\n\n  private addAwaitingHandler(handler: GestureHandler): void {\n    let alreadyExists = false;\n\n    this.awaitingHandlers.forEach((otherHandler) => {\n      if (otherHandler === handler) {\n        alreadyExists = true;\n        return;\n      }\n    });\n\n    if (alreadyExists) {\n      return;\n    }\n\n    this.awaitingHandlers.push(handler);\n\n    handler.setAwaiting(true);\n    handler.setActivationIndex(this.activationIndex++);\n  }\n\n  public recordHandlerIfNotPresent(handler: GestureHandler): void {\n    let alreadyExists = false;\n\n    this.gestureHandlers.forEach((otherHandler) => {\n      if (otherHandler === handler) {\n        alreadyExists = true;\n        return;\n      }\n    });\n\n    if (alreadyExists) {\n      return;\n    }\n\n    this.gestureHandlers.push(handler);\n\n    handler.setActive(false);\n    handler.setAwaiting(false);\n    handler.setActivationIndex(Number.MAX_SAFE_INTEGER);\n  }\n\n  private shouldHandlerWaitForOther(\n    handler: GestureHandler,\n    otherHandler: GestureHandler\n  ): boolean {\n    return (\n      handler !== otherHandler &&\n      (handler.shouldWaitForHandlerFailure(otherHandler) ||\n        otherHandler.shouldRequireToWaitForFailure(handler))\n    );\n  }\n\n  private canRunSimultaneously(\n    gh1: GestureHandler,\n    gh2: GestureHandler\n  ): boolean {\n    return (\n      gh1 === gh2 ||\n      gh1.shouldRecognizeSimultaneously(gh2) ||\n      gh2.shouldRecognizeSimultaneously(gh1)\n    );\n  }\n\n  private shouldHandlerBeCancelledBy(\n    handler: GestureHandler,\n    otherHandler: GestureHandler\n  ): boolean {\n    if (this.canRunSimultaneously(handler, otherHandler)) {\n      return false;\n    }\n\n    if (\n      handler !== otherHandler &&\n      (handler.isAwaiting() || handler.getState() === State.ACTIVE)\n    ) {\n      // For now it always returns false\n      return handler.shouldBeCancelledByOther(otherHandler);\n    }\n\n    const handlerPointers: number[] = handler.getTrackedPointersID();\n    const otherPointers: number[] = otherHandler.getTrackedPointersID();\n\n    if (\n      !PointerTracker.shareCommonPointers(handlerPointers, otherPointers) &&\n      handler.getView() !== otherHandler.getView()\n    ) {\n      return this.checkOverlap(handler, otherHandler);\n    }\n\n    return true;\n  }\n\n  private checkOverlap(\n    handler: GestureHandler,\n    otherHandler: GestureHandler\n  ): boolean {\n    // If handlers don't have common pointers, default return value is false.\n    // However, if at least on pointer overlaps with both handlers, we return true\n    // This solves issue in overlapping parents example\n\n    // TODO: Find better way to handle that issue, for example by activation order and handler cancelling\n\n    const handlerPointers: number[] = handler.getTrackedPointersID();\n    const otherPointers: number[] = otherHandler.getTrackedPointersID();\n\n    let overlap = false;\n\n    handlerPointers.forEach((pointer: number) => {\n      const handlerX: number = handler.getTracker().getLastX(pointer);\n      const handlerY: number = handler.getTracker().getLastY(pointer);\n\n      if (\n        isPointerInBounds(handler.getView(), { x: handlerX, y: handlerY }) &&\n        isPointerInBounds(otherHandler.getView(), { x: handlerX, y: handlerY })\n      ) {\n        overlap = true;\n      }\n    });\n\n    otherPointers.forEach((pointer: number) => {\n      const otherX: number = otherHandler.getTracker().getLastX(pointer);\n      const otherY: number = otherHandler.getTracker().getLastY(pointer);\n\n      if (\n        isPointerInBounds(handler.getView(), { x: otherX, y: otherY }) &&\n        isPointerInBounds(otherHandler.getView(), { x: otherX, y: otherY })\n      ) {\n        overlap = true;\n      }\n    });\n\n    return overlap;\n  }\n\n  private isFinished(state: State): boolean {\n    return (\n      state === State.END || state === State.FAILED || state === State.CANCELLED\n    );\n  }\n\n  // This function is called when handler receives touchdown event\n  // If handler is using mouse or pen as a pointer and any handler receives touch event,\n  // mouse/pen event dissappears - it doesn't send onPointerCancel nor onPointerUp (and others)\n  // This became a problem because handler was left at active state without any signal to end or fail\n  // To handle this, when new touch event is received, we loop through active handlers and check which type of\n  // pointer they're using. If there are any handler with mouse/pen as a pointer, we cancel them\n  public cancelMouseAndPenGestures(currentHandler: GestureHandler): void {\n    this.gestureHandlers.forEach((handler: GestureHandler) => {\n      if (\n        handler.getPointerType() !== PointerType.MOUSE &&\n        handler.getPointerType() !== PointerType.PEN\n      ) {\n        return;\n      }\n\n      if (handler !== currentHandler) {\n        handler.cancel();\n      } else {\n        // Handler that received touch event should have its pointer tracker reset\n        // This allows handler to smoothly change from mouse/pen to touch\n        // The drawback is, that when we try to use mouse/pen one more time, it doesn't send onPointerDown at the first time\n        // so it is required to click two times to get handler to work\n        //\n        // However, handler will receive manually created onPointerEnter that is triggered in EventManager in onPointerMove method.\n        // There may be possibility to use that fact to make handler respond properly to first mouse click\n        handler.getTracker().resetTracker();\n      }\n    });\n  }\n\n  public static getInstance(): GestureHandlerOrchestrator {\n    if (!GestureHandlerOrchestrator.instance) {\n      GestureHandlerOrchestrator.instance = new GestureHandlerOrchestrator();\n    }\n\n    return GestureHandlerOrchestrator.instance;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}