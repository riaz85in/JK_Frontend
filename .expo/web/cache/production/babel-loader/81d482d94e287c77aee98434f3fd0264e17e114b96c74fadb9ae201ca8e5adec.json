{"ast":null,"code":"import ServerContext from\"@react-navigation/native/lib/module/ServerContext\";import React from\"react\";import{useLinkingContext}from\"../link/useLinkingContext\";export function useServerState(){var getStateFromPath=useGetStateFromPath();var server=React.useContext(ServerContext);var pathname=React.useMemo(function(){var _server$location;var location=(_server$location=server==null?void 0:server.location)!=null?_server$location:typeof window!==\"undefined\"?window.location:undefined;return location?location.pathname+location.search:undefined;},[server]);var state=React.useMemo(function(){return pathname?getStateFromPath(pathname):null;},[pathname,getStateFromPath]);return typeof document===\"undefined\"?state:null;}function useGetStateFromPath(){var linking=useLinkingContext();return React.useCallback(function(state){return linking.getStateFromPath(state,linking.config);},[linking]);}","map":{"version":3,"names":["ServerContext","React","useLinkingContext","useServerState","getStateFromPath","useGetStateFromPath","server","useContext","pathname","useMemo","_server$location","location","window","undefined","search","state","document","linking","useCallback","config"],"sources":["C:/Riaz/Projects/JK/JK_Frontend/node_modules/expo-router/src/static/useServerState.ts"],"sourcesContent":["//  TODO: This is fragile and only works on web\n// @ts-expect-error\nimport ServerContext from \"@react-navigation/native/lib/module/ServerContext\";\nimport React from \"react\";\n\nimport getStateFromPath from \"../fork/getStateFromPath\";\nimport { useLinkingContext } from \"../link/useLinkingContext\";\n\nexport function useServerState() {\n  const getStateFromPath = useGetStateFromPath();\n\n  const server = React.useContext<any>(ServerContext);\n\n  const pathname = React.useMemo(() => {\n    const location =\n      server?.location ??\n      (typeof window !== \"undefined\" ? window.location : undefined);\n\n    return location ? location.pathname + location.search : undefined;\n  }, [server]);\n\n  const state = React.useMemo(() => {\n    // TODO: useEffect is not called on the server, so we don't need these checks.\n    return pathname ? getStateFromPath(pathname) : null;\n  }, [pathname, getStateFromPath]);\n\n  return typeof document === \"undefined\" ? state : null;\n}\n\nfunction useGetStateFromPath() {\n  const linking = useLinkingContext();\n\n  return React.useCallback(\n    (state: Parameters<typeof getStateFromPath>[0]) => {\n      return linking.getStateFromPath(state, linking.config);\n    },\n    [linking]\n  );\n}\n"],"mappings":"AAEA,MAAO,CAAAA,aAAa,KAAM,mDAAmD,CAC7E,MAAO,CAAAC,KAAK,KAAM,OAAO,CAGzB,OAASC,iBAAiB,iCAE1B,MAAO,SAAS,CAAAC,cAAcA,CAAA,CAAG,CAC/B,GAAM,CAAAC,gBAAgB,CAAGC,mBAAmB,EAAE,CAE9C,GAAM,CAAAC,MAAM,CAAGL,KAAK,CAACM,UAAU,CAAMP,aAAa,CAAC,CAEnD,GAAM,CAAAQ,QAAQ,CAAGP,KAAK,CAACQ,OAAO,CAAC,UAAM,KAAAC,gBAAA,CACnC,GAAM,CAAAC,QAAQ,EAAAD,gBAAA,CACZJ,MAAM,cAANA,MAAM,CAAEK,QAAQ,QAAAD,gBAAA,CACf,MAAO,CAAAE,MAAM,GAAK,WAAW,CAAGA,MAAM,CAACD,QAAQ,CAAGE,SAAU,CAE/D,MAAO,CAAAF,QAAQ,CAAGA,QAAQ,CAACH,QAAQ,CAAGG,QAAQ,CAACG,MAAM,CAAGD,SAAS,CACnE,CAAC,CAAE,CAACP,MAAM,CAAC,CAAC,CAEZ,GAAM,CAAAS,KAAK,CAAGd,KAAK,CAACQ,OAAO,CAAC,UAAM,CAEhC,MAAO,CAAAD,QAAQ,CAAGJ,gBAAgB,CAACI,QAAQ,CAAC,CAAG,IAAI,CACrD,CAAC,CAAE,CAACA,QAAQ,CAAEJ,gBAAgB,CAAC,CAAC,CAEhC,MAAO,OAAO,CAAAY,QAAQ,GAAK,WAAW,CAAGD,KAAK,CAAG,IAAI,CACvD,CAEA,QAAS,CAAAV,mBAAmBA,CAAA,CAAG,CAC7B,GAAM,CAAAY,OAAO,CAAGf,iBAAiB,EAAE,CAEnC,MAAO,CAAAD,KAAK,CAACiB,WAAW,CACtB,SAACH,KAA6C,CAAK,CACjD,MAAO,CAAAE,OAAO,CAACb,gBAAgB,CAACW,KAAK,CAAEE,OAAO,CAACE,MAAM,CAAC,CACxD,CAAC,CACD,CAACF,OAAO,CAAC,CACV,CACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}