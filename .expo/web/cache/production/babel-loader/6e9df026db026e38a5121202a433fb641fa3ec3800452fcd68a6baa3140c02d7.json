{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.createStringifySafeWithLimits=void 0;function createStringifySafeWithLimits(limits){var _limits$maxDepth=limits.maxDepth,maxDepth=_limits$maxDepth===void 0?Number.POSITIVE_INFINITY:_limits$maxDepth,_limits$maxStringLimi=limits.maxStringLimit,maxStringLimit=_limits$maxStringLimi===void 0?Number.POSITIVE_INFINITY:_limits$maxStringLimi,_limits$maxArrayLimit=limits.maxArrayLimit,maxArrayLimit=_limits$maxArrayLimit===void 0?Number.POSITIVE_INFINITY:_limits$maxArrayLimit,_limits$maxObjectKeys=limits.maxObjectKeysLimit,maxObjectKeysLimit=_limits$maxObjectKeys===void 0?Number.POSITIVE_INFINITY:_limits$maxObjectKeys;var stack=[];function replacer(_key,value){while(stack.length&&this!==stack[0]){stack.shift();}if(typeof value===\"string\"){var truncatedString=\"...(truncated)...\";if(value.length>maxStringLimit+truncatedString.length){return value.substring(0,maxStringLimit)+truncatedString;}return value;}if(typeof value!==\"object\"||value===null){return value;}var retval=value;if(Array.isArray(value)){if(stack.length>=maxDepth){retval=\"[ ... array with \"+value.length+\" values ... ]\";}else if(value.length>maxArrayLimit){retval=value.slice(0,maxArrayLimit).concat([\"... extra \"+(value.length-maxArrayLimit)+\" values truncated ...\"]);}}else{if(typeof value!==\"object\"){throw new Error(\"This was already found earlier\");}var keys=Object.keys(value);if(stack.length>=maxDepth){retval=\"{ ... object with \"+keys.length+\" keys ... }\";}else if(keys.length>maxObjectKeysLimit){retval={};for(var k of keys.slice(0,maxObjectKeysLimit)){retval[k]=value[k];}var truncatedKey=\"...(truncated keys)...\";retval[truncatedKey]=keys.length-maxObjectKeysLimit;}}stack.unshift(retval);return retval;}return function stringifySafe(arg){if(arg===undefined){return\"undefined\";}else if(arg===null){return\"null\";}else if(typeof arg===\"function\"){try{return arg.toString();}catch(_unused){return\"[function unknown]\";}}else if(arg instanceof Error){return arg.name+\": \"+arg.message;}else{try{var ret=JSON.stringify(arg,replacer);if(ret===undefined){return'[\"'+typeof arg+'\" failed to stringify]';}return ret;}catch(_unused2){if(typeof arg.toString===\"function\"){try{return arg.toString();}catch(_unused3){}}}}return'[\"'+typeof arg+'\" failed to stringify]';};}exports.createStringifySafeWithLimits=createStringifySafeWithLimits;var stringifySafe=createStringifySafeWithLimits({maxDepth:10,maxStringLimit:100,maxArrayLimit:50,maxObjectKeysLimit:50});exports.default=stringifySafe;","map":{"version":3,"names":["createStringifySafeWithLimits","limits","_limits$maxDepth","maxDepth","Number","POSITIVE_INFINITY","_limits$maxStringLimi","maxStringLimit","_limits$maxArrayLimit","maxArrayLimit","_limits$maxObjectKeys","maxObjectKeysLimit","stack","replacer","_key","value","length","shift","truncatedString","substring","retval","Array","isArray","slice","concat","Error","keys","Object","k","truncatedKey","unshift","stringifySafe","arg","undefined","toString","_unused","name","message","ret","JSON","stringify","_unused2","_unused3","exports","default"],"sources":["C:\\Riaz\\Projects\\JK\\JK_Frontend\\node_modules\\@expo\\metro-runtime\\src\\error-overlay\\modules\\stringifySafe\\index.ts"],"sourcesContent":["/**\n * Copyright (c) Evan Bacon.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Tries to stringify with JSON.stringify and toString, but catches exceptions\n * (e.g. from circular objects) and always returns a string and never throws.\n */\nexport function createStringifySafeWithLimits(limits: {\n  maxDepth?: number;\n  maxStringLimit?: number;\n  maxArrayLimit?: number;\n  maxObjectKeysLimit?: number;\n}): (foo: any) => string {\n  const {\n    maxDepth = Number.POSITIVE_INFINITY,\n    maxStringLimit = Number.POSITIVE_INFINITY,\n    maxArrayLimit = Number.POSITIVE_INFINITY,\n    maxObjectKeysLimit = Number.POSITIVE_INFINITY,\n  } = limits;\n  const stack: any[] = [];\n  function replacer(this: unknown, _key: string, value: any): any {\n    while (stack.length && this !== stack[0]) {\n      stack.shift();\n    }\n\n    if (typeof value === \"string\") {\n      const truncatedString = \"...(truncated)...\";\n      if (value.length > maxStringLimit + truncatedString.length) {\n        return value.substring(0, maxStringLimit) + truncatedString;\n      }\n      return value;\n    }\n    if (typeof value !== \"object\" || value === null) {\n      return value;\n    }\n\n    let retval = value;\n    if (Array.isArray(value)) {\n      if (stack.length >= maxDepth) {\n        retval = `[ ... array with ${value.length} values ... ]`;\n      } else if (value.length > maxArrayLimit) {\n        retval = value\n          .slice(0, maxArrayLimit)\n          .concat([\n            `... extra ${value.length - maxArrayLimit} values truncated ...`,\n          ]);\n      }\n    } else {\n      // Add refinement after Array.isArray call.\n      if (typeof value !== \"object\") {\n        throw new Error(\"This was already found earlier\");\n      }\n      const keys = Object.keys(value);\n      if (stack.length >= maxDepth) {\n        retval = `{ ... object with ${keys.length} keys ... }`;\n      } else if (keys.length > maxObjectKeysLimit) {\n        // Return a sample of the keys.\n        retval = {};\n        for (const k of keys.slice(0, maxObjectKeysLimit)) {\n          retval[k] = value[k];\n        }\n        const truncatedKey = \"...(truncated keys)...\";\n        retval[truncatedKey] = keys.length - maxObjectKeysLimit;\n      }\n    }\n    stack.unshift(retval);\n    return retval;\n  }\n\n  return function stringifySafe(arg: any): string {\n    if (arg === undefined) {\n      return \"undefined\";\n    } else if (arg === null) {\n      return \"null\";\n    } else if (typeof arg === \"function\") {\n      try {\n        return arg.toString();\n      } catch {\n        return \"[function unknown]\";\n      }\n    } else if (arg instanceof Error) {\n      return arg.name + \": \" + arg.message;\n    } else {\n      // Perform a try catch, just in case the object has a circular\n      // reference or stringify throws for some other reason.\n      try {\n        const ret = JSON.stringify(arg, replacer);\n        if (ret === undefined) {\n          return '[\"' + typeof arg + '\" failed to stringify]';\n        }\n        return ret;\n      } catch {\n        if (typeof arg.toString === \"function\") {\n          try {\n            // $FlowFixMe[incompatible-use] : toString shouldn't take any arguments in general.\n            return arg.toString();\n          } catch {}\n        }\n      }\n    }\n    return '[\"' + typeof arg + '\" failed to stringify]';\n  };\n}\n\nconst stringifySafe = createStringifySafeWithLimits({\n  maxDepth: 10,\n  maxStringLimit: 100,\n  maxArrayLimit: 50,\n  maxObjectKeysLimit: 50,\n});\n\nexport default stringifySafe;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}