{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import Constants,{ExecutionEnvironment}from\"expo-constants\";import*as Linking from\"expo-linking\";import Platform from\"react-native-web/dist/exports/Platform\";import getPathFromState from\"../fork/getPathFromState\";import getStateFromPath from\"../fork/getStateFromPath\";export function getInitialURL(){return _getInitialURL.apply(this,arguments);}function _getInitialURL(){_getInitialURL=_asyncToGenerator(function*(){if(Platform.OS===\"web\"){var _window$location;if(typeof window===\"undefined\"){return\"\";}else if(typeof((_window$location=window.location)==null?void 0:_window$location.href)===\"string\"){return window.location.href;}}return Promise.race([_asyncToGenerator(function*(){var url=yield Linking.getInitialURL();if(url&&Constants.executionEnvironment===ExecutionEnvironment.StoreClient){var parsed=Linking.parse(url);if(parsed.path===null||[\"\",\"/\"].includes(parsed.path)){return getRootURL();}}return url!=null?url:getRootURL();})(),new Promise(function(resolve){return setTimeout(function(){return resolve(getRootURL());},150);})]);});return _getInitialURL.apply(this,arguments);}var _rootURL;export function getRootURL(){if(_rootURL===undefined){_rootURL=Linking.createURL(\"/\");}return _rootURL;}export function addEventListener(listener){var callback=undefined;if(Constants.executionEnvironment===ExecutionEnvironment.StoreClient){callback=function callback(_ref){var url=_ref.url;var parsed=Linking.parse(url);if(parsed.path===null||[\"\",\"/\"].includes(parsed.path)){listener(getRootURL());}else{listener(url);}};}else{callback=function callback(_ref2){var url=_ref2.url;return listener(url);};}var subscription=Linking.addEventListener(\"url\",callback);return function(){subscription.remove==null?void 0:subscription.remove();};}export{getStateFromPath,getPathFromState};","map":{"version":3,"names":["Constants","ExecutionEnvironment","Linking","Platform","getPathFromState","getStateFromPath","getInitialURL","_getInitialURL","apply","arguments","_asyncToGenerator","OS","_window$location","window","location","href","Promise","race","url","executionEnvironment","StoreClient","parsed","parse","path","includes","getRootURL","resolve","setTimeout","_rootURL","undefined","createURL","addEventListener","listener","callback","_ref","_ref2","subscription","remove"],"sources":["C:/Riaz/Projects/JK/JK_Frontend/node_modules/expo-router/src/link/linking.ts"],"sourcesContent":["import Constants, { ExecutionEnvironment } from \"expo-constants\";\nimport * as Linking from \"expo-linking\";\nimport { Platform } from \"react-native\";\n\nimport getPathFromState from \"../fork/getPathFromState\";\nimport getStateFromPath from \"../fork/getStateFromPath\";\n\n// A custom getInitialURL is used on native to ensure the app always starts at\n// the root path if it's launched from something other than a deep link.\n// This helps keep the native functionality working like the web functionality.\n// For example, if you had a root navigator where the first screen was `/settings` and the second was `/index`\n// then `/index` would be used on web and `/settings` would be used on native.\nexport async function getInitialURL(): Promise<string> {\n  if (Platform.OS === \"web\") {\n    if (typeof window === \"undefined\") {\n      return \"\";\n    } else if (typeof window.location?.href === \"string\") {\n      return window.location.href;\n    }\n  }\n  return Promise.race<string>([\n    (async () => {\n      const url = await Linking.getInitialURL();\n\n      // NOTE(EvanBacon): This could probably be wrapped with the development boundary\n      // since Expo Go is mostly just used in development.\n\n      // Expo Go is weird and requires the root path to be `/--/`\n      if (\n        url &&\n        Constants.executionEnvironment === ExecutionEnvironment.StoreClient\n      ) {\n        const parsed = Linking.parse(url);\n        // If the URL is defined (default in Expo Go dev apps) and the URL has no path:\n        // `exp://192.168.87.39:19000/` then use the default `exp://192.168.87.39:19000/--/`\n        if (parsed.path === null || [\"\", \"/\"].includes(parsed.path)) {\n          return getRootURL();\n        }\n      }\n      // The path will be nullish in bare apps when the app is launched from the home screen.\n      // TODO(EvanBacon): define some policy around notifications.\n      return url ?? getRootURL();\n    })(),\n    new Promise<string>((resolve) =>\n      // Timeout in 150ms if `getInitialState` doesn't resolve\n      // Workaround for https://github.com/facebook/react-native/issues/25675\n      setTimeout(() => resolve(getRootURL()), 150)\n    ),\n  ]);\n}\n\nlet _rootURL: string | undefined;\n\nexport function getRootURL(): string {\n  if (_rootURL === undefined) {\n    _rootURL = Linking.createURL(\"/\");\n  }\n  return _rootURL;\n}\n\nexport function addEventListener(listener: (url: string) => void) {\n  let callback: (({ url }: { url: string }) => void) | undefined = undefined;\n\n  if (Constants.executionEnvironment === ExecutionEnvironment.StoreClient) {\n    // This extra work is only done in the Expo Go app.\n    callback = ({ url }: { url: string }) => {\n      const parsed = Linking.parse(url);\n      // If the URL is defined (default in Expo Go dev apps) and the URL has no path:\n      // `exp://192.168.87.39:19000/` then use the default `exp://192.168.87.39:19000/--/`\n      if (parsed.path === null || [\"\", \"/\"].includes(parsed.path)) {\n        listener(getRootURL());\n      } else {\n        listener(url);\n      }\n    };\n  } else {\n    callback = ({ url }: { url: string }) => listener(url);\n  }\n  const subscription = Linking.addEventListener(\"url\", callback);\n\n  return () => {\n    // https://github.com/facebook/react-native/commit/6d1aca806cee86ad76de771ed3a1cc62982ebcd7\n    subscription.remove?.();\n  };\n}\n\nexport { getStateFromPath, getPathFromState };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}