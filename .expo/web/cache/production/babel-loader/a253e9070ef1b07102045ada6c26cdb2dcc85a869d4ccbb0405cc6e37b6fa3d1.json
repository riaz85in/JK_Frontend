{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";var MapperRegistry=function(){function MapperRegistry(module){_classCallCheck(this,MapperRegistry);this.sortedMappers=[];this.mappers=new Map();this.updatedSinceLastExecute=false;this._module=module;}_createClass(MapperRegistry,[{key:\"startMapper\",value:function startMapper(mapper){this.mappers.set(mapper.id,mapper);this.updatedSinceLastExecute=true;return mapper.id;}},{key:\"stopMapper\",value:function stopMapper(id){this.mappers.delete(id);this.updatedSinceLastExecute=true;}},{key:\"execute\",value:function execute(){if(this.updatedSinceLastExecute){this.updateOrder();this.updatedSinceLastExecute=false;}for(var i=0,len=this.sortedMappers.length;i<len;++i){var mapper=this.sortedMappers[i];if(mapper.dirty){mapper.execute();}}}},{key:\"updateOrder\",value:function updateOrder(){var nodes=_toConsumableArray(this.mappers.values()).map(function(mapper){return new Node(mapper);});var mappersById={};this.mappers.forEach(function(mapper){mappersById[mapper.id]=mapper;});for(var i=0,nodesLen=nodes.length;i<nodesLen;++i){var node=nodes[i];if(node.mapper.outputs.length===0){continue;}for(var j=0;j<nodesLen;++j){var restNode=nodes[j];if(i===j||restNode.mapper.inputs.length===0){continue;}for(var outi=0,outputsLen=node.mapper.outputs.length;outi<outputsLen;++outi){for(var resti=0,restLen=restNode.mapper.inputs.length;resti<restLen;++resti){if(node.mapper.outputs[outi]._id===restNode.mapper.inputs[resti]._id){node.children.push(restNode);}}}}}var post={};var postCounter=1;var dfs=function dfs(node){var index=nodes.indexOf(node);if(index===-1){return;}++postCounter;nodes.splice(index,1);if(node.children.length===0&&nodes.length>0){post[node.mapper.id]=postCounter++;dfs(nodes[0]);return;}for(var _i=0,len=node.children.length;_i<len;++_i){dfs(node.children[_i]);}post[node.mapper.id]=postCounter++;};while(nodes.length)dfs(nodes[0]);var postArray=Object.keys(post).map(function(key){var num=parseInt(key);return[num,post[num]];});postArray.sort(function(a,b){return b[1]-a[1];});this.sortedMappers=[];for(var _i2=0,len=postArray.length;_i2<len;++_i2){var _postArray$_i=_slicedToArray(postArray[_i2],1),id=_postArray$_i[0];this.sortedMappers.push(mappersById[id]);}}},{key:\"needRunOnRender\",get:function get(){return this.updatedSinceLastExecute;}}]);return MapperRegistry;}();export{MapperRegistry as default};var Node=_createClass(function Node(mapper){var children=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];_classCallCheck(this,Node);this.mapper=mapper;this.children=children;});","map":{"version":3,"names":["MapperRegistry","module","_classCallCheck","sortedMappers","mappers","Map","updatedSinceLastExecute","_module","_createClass","key","value","startMapper","mapper","set","id","stopMapper","delete","execute","updateOrder","i","len","length","dirty","nodes","_toConsumableArray","values","map","Node","mappersById","forEach","nodesLen","node","outputs","j","restNode","inputs","outi","outputsLen","resti","restLen","_id","children","push","post","postCounter","dfs","index","indexOf","splice","postArray","Object","keys","num","parseInt","sort","a","b","_postArray$_i","_slicedToArray","get","default","arguments","undefined"],"sources":["C:/Riaz/Projects/JK/JK_Frontend/node_modules/react-native-reanimated/lib/reanimated2/js-reanimated/MapperRegistry.js"],"sourcesContent":["export default class MapperRegistry {\n    constructor(module) {\n        this.sortedMappers = [];\n        this.mappers = new Map();\n        this.updatedSinceLastExecute = false;\n        this._module = module;\n    }\n    startMapper(mapper) {\n        this.mappers.set(mapper.id, mapper);\n        this.updatedSinceLastExecute = true;\n        return mapper.id;\n    }\n    stopMapper(id) {\n        this.mappers.delete(id);\n        this.updatedSinceLastExecute = true;\n    }\n    execute() {\n        if (this.updatedSinceLastExecute) {\n            this.updateOrder();\n            this.updatedSinceLastExecute = false;\n        }\n        for (let i = 0, len = this.sortedMappers.length; i < len; ++i) {\n            const mapper = this.sortedMappers[i];\n            if (mapper.dirty) {\n                mapper.execute();\n            }\n        }\n    }\n    updateOrder() {\n        const nodes = [...this.mappers.values()].map((mapper) => new Node(mapper));\n        const mappersById = {};\n        this.mappers.forEach((mapper) => {\n            mappersById[mapper.id] = mapper;\n        });\n        // create a graph from array of nodes\n        for (let i = 0, nodesLen = nodes.length; i < nodesLen; ++i) {\n            const node = nodes[i];\n            if (node.mapper.outputs.length === 0) {\n                continue;\n            }\n            for (let j = 0; j < nodesLen; ++j) {\n                const restNode = nodes[j];\n                if (i === j || restNode.mapper.inputs.length === 0) {\n                    continue;\n                }\n                for (let outi = 0, outputsLen = node.mapper.outputs.length; outi < outputsLen; ++outi) {\n                    for (let resti = 0, restLen = restNode.mapper.inputs.length; resti < restLen; ++resti) {\n                        if (node.mapper.outputs[outi]._id ===\n                            restNode.mapper.inputs[resti]._id) {\n                            node.children.push(restNode);\n                        }\n                    }\n                }\n            }\n        }\n        const post = {};\n        let postCounter = 1;\n        const dfs = (node) => {\n            const index = nodes.indexOf(node);\n            if (index === -1) {\n                // this node has already been handled\n                return;\n            }\n            ++postCounter;\n            nodes.splice(index, 1);\n            if (node.children.length === 0 && nodes.length > 0) {\n                post[node.mapper.id] = postCounter++;\n                dfs(nodes[0]);\n                return;\n            }\n            for (let i = 0, len = node.children.length; i < len; ++i) {\n                dfs(node.children[i]);\n            }\n            post[node.mapper.id] = postCounter++;\n        };\n        while (nodes.length)\n            dfs(nodes[0]);\n        const postArray = Object.keys(post).map((key) => {\n            const num = parseInt(key);\n            return [num, post[num]];\n        });\n        postArray.sort((a, b) => {\n            return b[1] - a[1];\n        });\n        // clear sorted mappers\n        this.sortedMappers = [];\n        for (let i = 0, len = postArray.length; i < len; ++i) {\n            const [id] = postArray[i];\n            this.sortedMappers.push(mappersById[id]);\n        }\n    }\n    get needRunOnRender() {\n        return this.updatedSinceLastExecute;\n    }\n}\nclass Node {\n    constructor(mapper, children = []) {\n        this.mapper = mapper;\n        this.children = children;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}