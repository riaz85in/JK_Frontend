{"ast":null,"code":"import React,{createContext,useContext}from\"react\";import{useInitialRootState}from\"./useInitialRootState\";import{jsx as _jsx}from\"react/jsx-runtime\";export var InitialRootStateContext=createContext(null);if(process.env.NODE_ENV!==\"production\"){InitialRootStateContext.displayName=\"InitialRootStateContext\";}export function useInitialRootStateContext(){var state=useContext(InitialRootStateContext);if(!state){throw new Error(\"useInitialRootStateContext is being used outside of InitialRootStateContext.Provider\");}return state;}export function InitialRootStateProvider(_ref){var children=_ref.children;var state=useInitialRootState();if(!state){return null;}return _jsx(InitialRootStateContext.Provider,{value:state,children:children});}","map":{"version":3,"names":["React","createContext","useContext","useInitialRootState","jsx","_jsx","InitialRootStateContext","process","env","NODE_ENV","displayName","useInitialRootStateContext","state","Error","InitialRootStateProvider","_ref","children","Provider","value"],"sources":["C:/Riaz/Projects/JK/JK_Frontend/node_modules/expo-router/src/useInitialRootStateContext.tsx"],"sourcesContent":["import React, { createContext, useContext } from \"react\";\n\nimport { State } from \"./fork/getPathFromState\";\nimport { useInitialRootState } from \"./useInitialRootState\";\n\nexport const InitialRootStateContext = createContext<State | null>(null);\n\nif (process.env.NODE_ENV !== \"production\") {\n  InitialRootStateContext.displayName = \"InitialRootStateContext\";\n}\n\n/** Fetch the initial root navigation state instantly on web and slightly delayed on native. */\nexport function useInitialRootStateContext() {\n  const state = useContext(InitialRootStateContext);\n  if (!state) {\n    throw new Error(\n      \"useInitialRootStateContext is being used outside of InitialRootStateContext.Provider\"\n    );\n  }\n  return state;\n}\n\n/**\n * Unlike React Navigation, we statically know the config and always assume a URL is available.\n * This enables us to always know the root state.\n */\nexport function InitialRootStateProvider({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const state = useInitialRootState();\n\n  // TODO: This is only used on native but it shouldn't be used at all.\n  if (!state) {\n    // Prevent all rendering until we have the initial root state.\n    // Probably React Navigation should be doing this for us.\n    return null;\n  }\n\n  return (\n    <InitialRootStateContext.Provider value={state}>\n      {children}\n    </InitialRootStateContext.Provider>\n  );\n}\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,KAAQ,OAAO,CAGxD,OAASC,mBAAmB,6BAAgC,OAAAC,GAAA,IAAAC,IAAA,yBAE5D,MAAO,IAAM,CAAAC,uBAAuB,CAAGL,aAAa,CAAe,IAAI,CAAC,CAExE,GAAIM,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAK,YAAY,CAAE,CACzCH,uBAAuB,CAACI,WAAW,CAAG,yBAAyB,CACjE,CAGA,MAAO,SAAS,CAAAC,0BAA0BA,CAAA,CAAG,CAC3C,GAAM,CAAAC,KAAK,CAAGV,UAAU,CAACI,uBAAuB,CAAC,CACjD,GAAI,CAACM,KAAK,CAAE,CACV,KAAM,IAAI,CAAAC,KAAK,CACb,sFAAsF,CACvF,CACH,CACA,MAAO,CAAAD,KAAK,CACd,CAMA,MAAO,SAAS,CAAAE,wBAAwBA,CAAAC,IAAA,CAIrC,IAHD,CAAAC,QAAQ,CAAAD,IAAA,CAARC,QAAQ,CAIR,GAAM,CAAAJ,KAAK,CAAGT,mBAAmB,EAAE,CAGnC,GAAI,CAACS,KAAK,CAAE,CAGV,MAAO,KAAI,CACb,CAEA,MACE,CAAAP,IAAA,CAACC,uBAAuB,CAACW,QAAQ,EAACC,KAAK,CAAEN,KAAM,CAAAI,QAAA,CAC5CA,QAAQ,EACwB,CAEvC"},"metadata":{},"sourceType":"module","externalDependencies":[]}